import React, { Component } from 'react';
import { MDBModal, MDBModalHeader, MDBModalBody, MDBInput, MDBModalFooter, MDBBtn, MDBIcon } from 'mdbreact';
import crypto from 'crypto';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

// Unique ID creation requires a high quality random # generator.  In node.js
// this is pretty straight-forward - we use the crypto API.



var rng = function nodeRNG() {
  return crypto.randomBytes(16);
};

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

var bytesToUuid_1 = bytesToUuid;

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid_1(b);
}

var v1_1 = v1;

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".dataTables_wrapper .table tbody tr.active {\r\n  background-color: rgba(52, 181, 229, 0.3);\r\n}\r\n";
styleInject(css);

var Modal =
/*#__PURE__*/
function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "inputChange", function (e) {
      return _this.setState(_defineProperty({}, e.target.name, e.target.value));
    });

    _defineProperty(_assertThisInitialized(_this), "submitForm", function (e) {
      e.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "actionSubmit", function () {
      _this.props.action(_objectSpread2({}, _this.state));

      _this.props.toggle();
    });

    var row = _this.props.editor ? _this.props.rows.find(function (row) {
      return row.id === _this.props.checkedRows[0];
    }) : {};
    _this.state = _objectSpread2({}, row);
    return _this;
  }

  _createClass(Modal, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          columns = _this$props.columns,
          okLabel = _this$props.okLabel,
          cancelLabel = _this$props.cancelLabel,
          isOpen = _this$props.isOpen,
          toggle = _this$props.toggle;
      return React.createElement(MDBModal, {
        isOpen: isOpen,
        toggle: toggle
      }, React.createElement(MDBModalHeader, {
        toggle: toggle
      }, React.createElement("span", {
        className: "font-weight-bold text-secondary"
      }, okLabel)), React.createElement(MDBModalBody, null, React.createElement("form", {
        onSubmit: this.submitForm
      }, columns.map(function (col) {
        return React.createElement(MDBInput, {
          key: col.field,
          label: col.label,
          name: col.field,
          value: _this2.state[col.field],
          onInput: _this2.inputChange
        });
      }))), React.createElement(MDBModalFooter, null, React.createElement(MDBBtn, {
        color: "secondary",
        onClick: toggle
      }, cancelLabel), React.createElement(MDBBtn, {
        color: "primary",
        onClick: this.actionSubmit
      }, okLabel)));
    }
  }]);

  return Modal;
}(Component);

Modal.propTypes = {
  cancelLabel: propTypes.string.isRequired,
  okLabel: propTypes.string.isRequired,
  action: propTypes.func.isRequired,
  checkedRows: propTypes.arrayOf(propTypes.string).isRequired,
  columns: propTypes.arrayOf(propTypes.object).isRequired,
  editor: propTypes.bool.isRequired,
  isOpen: propTypes.bool.isRequired,
  rows: propTypes.arrayOf(propTypes.object).isRequired,
  toggle: propTypes.func.isRequired
};

var DeleteModal = function DeleteModal(_ref) {
  var isOpen = _ref.isOpen,
      toggle = _ref.toggle,
      action = _ref.action,
      label = _ref.label,
      desc = _ref.desc,
      yes = _ref.yes,
      no = _ref.no;
  return React.createElement(MDBModal, {
    isOpen: isOpen,
    toggle: toggle
  }, React.createElement(MDBModalHeader, {
    className: "flex-center"
  }, React.createElement("span", {
    className: "font-weight-bold text-center text-danger"
  }, label)), React.createElement(MDBModalBody, null, React.createElement("p", {
    className: "text-center h5"
  }, desc)), React.createElement(MDBModalFooter, {
    className: "flex-center"
  }, React.createElement(MDBBtn, {
    color: "danger",
    onClick: action
  }, yes), React.createElement(MDBBtn, {
    color: "primary",
    onClick: toggle
  }, no)));
};

DeleteModal.propTypes = {
  label: propTypes.string.isRequired,
  desc: propTypes.string.isRequired,
  yes: propTypes.string.isRequired,
  no: propTypes.string.isRequired,
  action: propTypes.func.isRequired,
  isOpen: propTypes.bool.isRequired,
  toggle: propTypes.func.isRequired
};

var TableEditor =
/*#__PURE__*/
function (_Component) {
  _inherits(TableEditor, _Component);

  function TableEditor(props) {
    var _this;

    _classCallCheck(this, TableEditor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableEditor).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "checkTheRow", function (e, id) {
      var ctrl = e.ctrlKey;

      if (!ctrl) {
        _this.clearSelection();
      }

      if (!_this.state.checkedRows.includes(id)) {
        e.currentTarget.classList.add("active");

        _this.setState(function (prevState) {
          return !ctrl ? {
            checkedRows: [id]
          } : {
            checkedRows: [].concat(_toConsumableArray(prevState.checkedRows), [id])
          };
        });
      } else {
        e.currentTarget.classList.remove("active");

        _this.setState(function (prevState) {
          return !ctrl ? {
            checkedRows: []
          } : {
            checkedRows: prevState.checkedRows.filter(function (row) {
              return row !== id;
            })
          };
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "clearSelection", function () {
      return document.querySelectorAll(".dataTables_wrapper .table tbody tr.active").forEach(function (row) {
        return row.classList.remove("active");
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleModal", function (editor) {
      return _this.setState({
        editor: editor,
        modal: !_this.state.modal
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleDelete", function () {
      return _this.setState({
        delete: !_this.state.delete
      });
    });

    _defineProperty(_assertThisInitialized(_this), "addRow", function (fields) {
      return _this.setState(function (prevState) {
        var id = v1_1();

        var newRow = _objectSpread2({}, fields, {
          id: id,
          clickEvent: function clickEvent(e) {
            return _this.checkTheRow(e, id);
          }
        });

        return {
          rows: [newRow].concat(_toConsumableArray(prevState.rows))
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "editRow", function (fields) {
      return _this.setState(function (prevState) {
        var newRows = prevState.rows.map(function (row) {
          if (row.id === fields.id) Object.assign(row, fields);
          return row;
        });
        return {
          rows: newRows
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "deleteRows", function () {
      _this.setState(function (prevState) {
        var newRows = prevState.rows.filter(function (row) {
          return !_this.state.checkedRows.includes(row.id);
        });

        _this.clearSelection();

        return {
          rows: newRows,
          checkedRows: []
        };
      });

      _this.toggleDelete();
    });

    _this.state = {
      columns: props.columns,
      rows: props.rows,
      checkedRows: [],
      modal: false,
      delete: false,
      editor: false
    };
    return _this;
  }

  _createClass(TableEditor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var rows = this.props.rows.map(function (row) {
        var id = v1_1();
        return _objectSpread2({}, row, {
          id: id,
          clickEvent: function clickEvent(e) {
            return _this2.checkTheRow(e, id);
          }
        });
      });
      this.setState({
        rows: rows
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this3 = this;

      if (prevProps.rows !== this.props.rows) {
        var rows = this.props.rows.map(function (row) {
          var id = v1_1();
          return _objectSpread2({}, row, {
            id: id,
            clickEvent: function clickEvent(e) {
              return _this3.checkTheRow(e, id);
            }
          });
        });
        this.setState({
          rows: rows
        });
      }

      if (prevState.columns !== this.props.columns) {
        this.setState({
          columns: this.props.columns
        });
      }

      if (prevState.rows !== this.state.rows && this.props.onChange) {
        this.props.onChange({
          columns: this.state.columns,
          rows: this.state.rows
        });
      }

      if (prevState.columns !== this.state.columns && this.props.onChange) {
        this.props.onChange({
          columns: this.state.columns,
          rows: this.state.rows
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var data = {
        columns: this.state.columns,
        rows: this.state.rows
      };
      var rowsLength = this.state.checkedRows.length;
      var Table = React.cloneElement(this.props.children, {
        data: data
      });
      return React.createElement("div", null, React.createElement("div", {
        className: "d-flex justify-content-center align-items-center"
      }, React.createElement(MDBBtn, {
        onClick: function onClick() {
          return _this4.toggleModal(false);
        },
        color: "info",
        rounded: true,
        size: "sm"
      }, this.props.addLabel, " ", React.createElement(MDBIcon, {
        icon: "plus"
      })), React.createElement(MDBBtn, {
        onClick: function onClick() {
          return _this4.toggleModal(true);
        },
        disabled: rowsLength !== 1,
        color: "info",
        rounded: true,
        size: "sm"
      }, this.props.editLabel), React.createElement(MDBBtn, {
        onClick: this.toggleDelete,
        disabled: rowsLength < 1,
        color: "danger",
        rounded: true,
        size: "sm"
      }, this.props.deleteLabel, " ", React.createElement(MDBIcon, {
        icon: "times"
      }))), Table, this.state.modal && React.createElement(Modal, {
        columns: this.state.columns,
        rows: this.state.rows,
        checkedRows: this.state.checkedRows,
        isOpen: this.state.modal,
        editor: this.state.editor,
        toggle: function toggle() {
          return _this4.toggleModal(false);
        },
        action: this.state.editor && rowsLength ? this.editRow : this.addRow,
        okLabel: this.state.editor ? this.props.editLabel : this.props.addLabel,
        cancelLabel: this.props.cancelLabel
      }), this.state.delete && React.createElement(DeleteModal, {
        isOpen: this.state.delete,
        toggle: this.toggleDelete,
        action: this.deleteRows,
        label: this.props.deleteLabel,
        desc: this.props.deleteDesc,
        yes: this.props.yes,
        no: this.props.no
      }));
    }
  }]);

  return TableEditor;
}(Component);

TableEditor.propTypes = {
  addLabel: propTypes.string,
  editLabel: propTypes.string,
  deleteLabel: propTypes.string,
  cancelLabel: propTypes.string,
  yes: propTypes.string,
  no: propTypes.string,
  deleteDesc: propTypes.string,
  children: propTypes.node,
  columns: propTypes.arrayOf(propTypes.object),
  onChange: propTypes.func,
  rows: propTypes.arrayOf(propTypes.object)
};
TableEditor.defaultProps = {
  addLabel: "Add",
  editLabel: "Edit",
  deleteLabel: "Delete",
  cancelLabel: "Close",
  yes: "Yes",
  no: "No",
  deleteDesc: "Are you sure you want to delete selected row?"
};

export default TableEditor;
