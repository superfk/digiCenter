import React, { Component } from "react";
import PropTypes from "prop-types";
import { MDBBtn, MDBIcon } from "mdbreact";
import uuidv1 from "uuid/v1";
import "./styles.css";
import Modal from "./components/Modal";
import DeleteModal from "./components/DeleteModal";

class TableEditor extends Component {
  constructor(props) {
    super(props);
    this.state = {
      columns: props.columns,
      rows: props.rows,
      checkedRows: [],
      modal: false,
      delete: false,
      editor: false
    };
  }

  componentDidMount() {
    const rows = this.props.rows.map(row => {
      const id = uuidv1();
      return { ...row, id, clickEvent: e => this.checkTheRow(e, id) };
    });

    this.setState({ rows });
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.rows !== this.props.rows) {
      const rows = this.props.rows.map(row => {
        const id = uuidv1();
        return { ...row, id, clickEvent: e => this.checkTheRow(e, id) };
      });

      this.setState({ rows });
    }

    if (prevState.columns !== this.props.columns) {
      this.setState({ columns: this.props.columns });
    }

    if (prevState.rows !== this.state.rows && this.props.onChange) {
      this.props.onChange({
        columns: this.state.columns,
        rows: this.state.rows
      });
    }

    if (prevState.columns !== this.state.columns && this.props.onChange) {
      this.props.onChange({
        columns: this.state.columns,
        rows: this.state.rows
      });
    }
  }

  checkTheRow = (e, id) => {
    const ctrl = e.ctrlKey;

    if (!ctrl) {
      this.clearSelection();
    }

    if (!this.state.checkedRows.includes(id)) {
      e.currentTarget.classList.add("active");

      this.setState(prevState => {
        return !ctrl
          ? { checkedRows: [id] }
          : { checkedRows: [...prevState.checkedRows, id] };
      });
    } else {
      e.currentTarget.classList.remove("active");

      this.setState(prevState => {
        return !ctrl
          ? { checkedRows: [] }
          : { checkedRows: prevState.checkedRows.filter(row => row !== id) };
      });
    }
  };

  clearSelection = () =>
    document
      .querySelectorAll(".dataTables_wrapper .table tbody tr.active")
      .forEach(row => row.classList.remove("active"));

  toggleModal = editor => this.setState({ editor, modal: !this.state.modal });

  toggleDelete = () => this.setState({ delete: !this.state.delete });

  addRow = fields =>
    this.setState(prevState => {
      const id = uuidv1();
      const newRow = {
        ...fields,
        id,
        clickEvent: e => this.checkTheRow(e, id)
      };

      return {
        rows: [newRow, ...prevState.rows]
      };
    });

  editRow = fields =>
    this.setState(prevState => {
      const newRows = prevState.rows.map(row => {
        if (row.id === fields.id) Object.assign(row, fields);

        return row;
      });

      return { rows: newRows };
    });

  deleteRows = () => {
    this.setState(prevState => {
      const newRows = prevState.rows.filter(
        row => !this.state.checkedRows.includes(row.id)
      );

      this.clearSelection();
      return { rows: newRows, checkedRows: [] };
    });

    this.toggleDelete();
  };

  render() {
    const data = {
      columns: this.state.columns,
      rows: this.state.rows
    };

    const rowsLength = this.state.checkedRows.length;

    const Table = React.cloneElement(this.props.children, { data });

    return (
      <div>
        <div className="d-flex justify-content-center align-items-center">
          <MDBBtn
            onClick={() => this.toggleModal(false)}
            color="info"
            rounded
            size="sm"
          >
            {this.props.addLabel} <MDBIcon icon="plus" />
          </MDBBtn>
          <MDBBtn
            onClick={() => this.toggleModal(true)}
            disabled={rowsLength !== 1}
            color="info"
            rounded
            size="sm"
          >
            {this.props.editLabel}
          </MDBBtn>
          <MDBBtn
            onClick={this.toggleDelete}
            disabled={rowsLength < 1}
            color="danger"
            rounded
            size="sm"
          >
            {this.props.deleteLabel} <MDBIcon icon="times" />
          </MDBBtn>
        </div>
        {Table}
        {this.state.modal && (
          <Modal
            columns={this.state.columns}
            rows={this.state.rows}
            checkedRows={this.state.checkedRows}
            isOpen={this.state.modal}
            editor={this.state.editor}
            toggle={() => this.toggleModal(false)}
            action={
              this.state.editor && rowsLength ? this.editRow : this.addRow
            }
            okLabel={
              this.state.editor ? this.props.editLabel : this.props.addLabel
            }
            cancelLabel={this.props.cancelLabel}
          />
        )}
        {this.state.delete && (
          <DeleteModal
            isOpen={this.state.delete}
            toggle={this.toggleDelete}
            action={this.deleteRows}
            label={this.props.deleteLabel}
            desc={this.props.deleteDesc}
            yes={this.props.yes}
            no={this.props.no}
          />
        )}
      </div>
    );
  }
}

TableEditor.propTypes = {
  addLabel: PropTypes.string,
  editLabel: PropTypes.string,
  deleteLabel: PropTypes.string,
  cancelLabel: PropTypes.string,
  yes: PropTypes.string,
  no: PropTypes.string,
  deleteDesc: PropTypes.string,
  children: PropTypes.node,
  columns: PropTypes.arrayOf(PropTypes.object),
  onChange: PropTypes.func,
  rows: PropTypes.arrayOf(PropTypes.object)
};

TableEditor.defaultProps = {
  addLabel: "Add",
  editLabel: "Edit",
  deleteLabel: "Delete",
  cancelLabel: "Close",
  yes: "Yes",
  no: "No",
  deleteDesc: "Are you sure you want to delete selected row?"
};

export default TableEditor;
