import React from 'react';
import { shallow } from 'enzyme';
import { findByTestAttr, checkProps } from '../test/testUtils.js';
import Preview from './preview';

const defaultProps = {
    src: undefined,
    fileExt: undefined,
    name: 'randomPhoto1203897120398.jpg',
    messageReplace: 'Custom message'
}

const setup = (props = {}) => {
    const setupProps = { ...defaultProps, ...props };
    const wrapper = shallow(<Preview {...setupProps} />);
    return wrapper;
}


describe('Preview', () => {
    let wrapper;

    beforeEach(() => {
        wrapper = setup();
    })

    afterEach(() => {
        wrapper = undefined;
    });

    test('does not throw warning with expected props', () => {
        checkProps(Preview, defaultProps)
    });

    test('renders without error', () => {
        const wrapperDiv = findByTestAttr(wrapper, 'component-preview-wrapper');
        expect(wrapperDiv.length).toBe(1);
    });

    test('displays the name of the file', () => {
        const nameWrapper = findByTestAttr(wrapper, 'component-preview-name');
        expect(nameWrapper.length).toBe(1);
        expect(nameWrapper.text()).toEqual(defaultProps.name);
    })

    test('displays a custom info message', () => {
        const msgWrapper = findByTestAttr(wrapper, 'component-preview-msg');
        expect(msgWrapper.length).toBe(1);
        expect(msgWrapper.text()).toEqual(defaultProps.messageReplace);
    })

    describe('Preview component when src prop is defined', () => {

        const props = {
            src: '/public/assets/someImg.jpg',
        }

        beforeEach(() => {
            wrapper = setup(props);
        })

        test('renders img element with src attribute the same as the one passed through src prop', () => {
            const img = findByTestAttr(wrapper, 'component-preview-img');
            expect(img.length).toBe(1);
            expect(img.at(0).props().src).toEqual(props.src);
        });

        test('doesnt render icon', () => {
            const iconComponent = findByTestAttr(wrapper, 'component-preview-icon');
            expect(iconComponent.length).toBe(0);
        })

    });

    describe('Preview component when src prop is undefined', () => {
        const props = {
            fileExt: 'jpg',
        }

        beforeEach(() => {
            wrapper = setup(props);
        })

        test('render icon component', () => {
            const iconComponent = findByTestAttr(wrapper, 'component-preview-icon');
            expect(iconComponent.length).toBe(1);
            expect(iconComponent.dive().exists('i')).toBeTruthy()
        });

        test('text with file extension', () => {
            const fileExtSpan = findByTestAttr(wrapper, 'component-preview-ext');
            expect(fileExtSpan.length).toBe(1);
            expect(fileExtSpan.text()).toEqual(props.fileExt);
        });
    });
});




