import React from 'react';
import { shallow } from 'enzyme';
import { findByTestAttr, checkProps } from '../test/testUtils.js';
import Fileupload from './fileupload';
import Message from './message';
import Preview from './preview';
import submitButton from './submitButton';
import removeButton from './removeButton';


const defaultProps = {
    preview: false,
    name: 'randomPhoto1203897120398.jpg',
    messageReplace: 'Custom message',
    src: undefined,
    fileExt: undefined,
    removeHandler: jest.fn(),
    messageRemove: "Remove",
    onSubmitHandler: jest.fn(),
    messageUpload: "Submit",
    messageError: "Ooops, something wrong happended.",
    messageDefault: "Drag and drop a file here or click",
    showSubmitButton: false,
    containerHeight: 230,
    disabled: false,
    onInputClick: jest.fn(),
    showRemove: true,
    showErrors: true,
    errorMessagesArray: [],
    onChangeHandler: jest.fn()
}

const setup = (props = {}) => {
    const setupProps = { ...defaultProps, ...props };
    const wrapper = shallow(<Fileupload {...setupProps} />);
    return wrapper;
}

describe('Remove Button', () => {
    let wrapper;

    beforeEach(() => {
        wrapper = setup();
    });

    afterEach(() => {
        wrapper = undefined;
        defaultProps.removeHandler.mockClear()
        defaultProps.onSubmitHandler.mockClear()
        defaultProps.onInputClick.mockClear()
        defaultProps.onChangeHandler.mockClear()
    });


    test('does not throw warning with expected props', () => {
        checkProps(Fileupload, defaultProps);
    });

    test('renders without error', () => {
        const wrappingDiv = findByTestAttr(wrapper, 'component-file-upload-wrapper');
        expect(wrappingDiv.length).toBe(1);
    });

    test('disabled prop is true', () => {
        const props = { disabled: true };
        let wrapper = setup(props);
        const input = findByTestAttr(wrapper, 'component-file-input');
        expect(input.prop('disabled')).toBeTruthy();
    })

    test('wrapping div has the height in px equal to the number passed as a height prop', () => {
        const wrappingDiv = findByTestAttr(wrapper, 'component-file-upload-wrapper');
        expect(Object.keys(wrappingDiv.at(0).prop('style'))).toContain('height');
        expect(wrappingDiv.at(0).prop('style').height).toBe(defaultProps.containerHeight + 'px');
    });

    test('renders Message component', () => {
        expect(wrapper.find(Message).length).toBe(1);
    });

    test('renders file input', () => {
        const fileInput = findByTestAttr(wrapper, 'component-file-input');
        expect(fileInput.length).toBe(1);
    });

    describe('disabled prop is false', () => {
        test('fires onClick function when input is clicked', () => {
            const input = findByTestAttr(wrapper, 'component-file-input');
            input.simulate('click');
            expect(defaultProps.onInputClick.mock.calls.length).toEqual(1);
        });

        test('fires onChangeHandler function when input value has changed', () => {
            const input = findByTestAttr(wrapper, 'component-file-input');
            input.simulate('change', { target: { value: 'hello' } });

            expect(defaultProps.onChangeHandler.mock.calls.length).toEqual(1);
        });
    })

    describe('preview prop is set to true', () => {
        let props = { preview: true };

        beforeEach(() => {
            wrapper = setup(props);
        });

        const preview = () => wrapper.find(Preview);

        test('renders preview component', () => {
            expect(preview().length).toBe(1);
        });

        test('pass name down to Preview component as a name prop', () => {
            expect(preview().prop('name')).toBe(defaultProps.name);
        });

        test('pass src down to Preview component as a src prop', () => {
            expect(preview().prop('src')).toBe(defaultProps.src);
        });

        test('pass fileExt down to Preview component as a fileExt prop', () => {
            expect(preview().prop('fileExt')).toBe(defaultProps.fileExt);
        });

        test('pass messageReplace down to Preview component as a messageReplace prop', () => {
            expect(preview().prop('messageReplace')).toBe(defaultProps.messageReplace);
        });
    });

    describe('showSubmitButton prop is set to true', () => {
        let props = { showSubmitButton: true };
        const SubmitButton = () => wrapper.find(submitButton);


        beforeEach(() => {
            wrapper = setup(props);
        });

        test('renders submitButton component', () => {
            expect(SubmitButton().length).toBe(1);
        });

        test('pass messageUpload down to submitButton component as a messageUpload prop', () => {
            expect(SubmitButton().prop('messageUpload')).toBe(defaultProps.messageUpload);
        });

        test('pass onSubmitHandler down to submitButton component as a onClick prop', () => {
            expect(SubmitButton().prop('onClick')).toBe(defaultProps.onSubmitHandler);
        });
    })

    describe('RemoveButton', () => {
        const RemoveButton = () => wrapper.find(removeButton);

        test('pass removeHandler down to RemoveButton component as a onClick prop', () => {
            expect(RemoveButton().prop('onClick')).toBe(defaultProps.removeHandler);
        });

        test('pass messageRemove down to RemoveButton component as a messageRemove prop', () => {
            expect(RemoveButton().prop('messageRemove')).toBe(defaultProps.messageRemove);
        });

        describe('showErrors prop is set to false', () => {
            const props = { showErrors: false, showRemove: false };
            wrapper = setup(props);
            const RemoveButton = () => wrapper.find(removeButton);

            expect(RemoveButton().length).toBe(0);
        })

    });
});