import React from 'react';
import { shallow } from 'enzyme';
import { findByTestAttr, checkProps } from '../test/testUtils.js';
import Message from './message';


const defaultProps = {
    hasError: false,
    messageError: "Ooops, something wrong happended.",
    messageDefault: "Drag and drop a file here or click"
}

const setup = (props = {}) => {
    const setupProps = { ...defaultProps, ...props };
    const wrapper = shallow(<Message {...setupProps} />);
    return wrapper;
}

describe('Remove Button', () => {
    let wrapper;

    beforeEach(() => {
        wrapper = setup();
    });

    afterEach(() => {
        wrapper = undefined;
    });

    test('renders without errors', () => {
        const div = findByTestAttr(wrapper, 'component-message');
        expect(div.length).toBe(1);
    });

    test('renders icon', () => {
        const Icon = findByTestAttr(wrapper, 'component-icon');
        expect(Icon.length).toBe(1);
    });

    test('does not throw warning with expected props', () => {
        checkProps(Message, defaultProps);
    });

    test('renders custom text passed through as a messageDefault prop', () => {
        const customProps = { messageDefault: "Custom message" }
        const wrapper = setup(customProps);
        const paragrapgh = findByTestAttr(wrapper, 'component-message-default');
        expect(paragrapgh.text()).toBe('Custom message');
    });

    test('doesnt render eroor message when hasError prop is false', () => {
        const errorWrapper = findByTestAttr(wrapper, 'component-message-error');
        expect(errorWrapper.length).toBe(0);
    });

    test('renders error message when hasError prop is true', () => {
        const customProps = { hasError: true, messageError: "Custom message" }
        const wrapper = setup(customProps);
        const errorWrapper = findByTestAttr(wrapper, 'component-message-error');
        expect(errorWrapper.length).toBe(1);
        expect(errorWrapper.text()).toBe(customProps.messageError);
    });
});