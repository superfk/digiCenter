import React, { Component } from 'react'
import Fileupload from '../components/fileupload';
import PropTypes from "prop-types"
import { getImageFormat, convertSizeToByte, getFileType } from '../utils/utils'

class fileuploadContainer extends Component {
    state = {
        file: null,
        fileName: '',
        fileSize: undefined,
        isImage: undefined,
        fileWidth: undefined,
        fileHeight: undefined,
        preview: false,
        errorTypes: [],
        fileExt: '',
        imgSrc: '',
    }

    resetPreview = () => {
        this.setState({
            file: null,
            fileName: '',
            fileSize: undefined,
            isImage: undefined,
            fileWidth: undefined,
            fileHeight: undefined,
            fileExt: '',
            preview: false,
            errorTypes: [],
            imgSrc: '',
        })
    }

    getFileInformations = file => {
        const imgFileExtensions = ['png', 'jpg', 'jpeg', 'gif', 'bmp'];
        const fileExt = getFileType(file.name);

        const isImage = imgFileExtensions.indexOf(fileExt) >= 0;

        const fileInfo = {
            fileName: file.name,
            fileSize: file.size,
            isImage,
            fileWidth: undefined,
            fileHeight: undefined,
            fileExt,
            file
        }

        return fileInfo;
    }

    onChangeHandler = e => {
        const file = e.target.files[0];

        this.resetPreview();
        this.readFile(file);
    }

    onInputClick = e => {
        e.target.value = ''
    }


    readFile = file => {
        const { maxFileSizePreview } = this.props;

        const fileInfo = this.getFileInformations(file);
        const errorTypes = this.validateFile(fileInfo);
        const setPreview = fileInfo.isImage && fileInfo.fileSize < convertSizeToByte(maxFileSizePreview)

        this.setState({
            errorTypes,
            ...fileInfo,
        }, () => {
            setPreview ? this.readAsDataURL(file) : this.onFileReady(false);
        });
    }

    validateFile = fileInfo => {
        const { allowedFileExtensions, maxFileSize } = this.props;
        const { fileExt, fileSize } = fileInfo;
        const maxFileSizeInByte = convertSizeToByte(maxFileSize)

        const errorsArray = [];

        if (allowedFileExtensions.indexOf('*') < 0 && allowedFileExtensions.indexOf(fileExt) < 0) {
            errorsArray.push('fileExtension');
        }

        if (maxFileSizeInByte !== 0 && fileSize > maxFileSizeInByte) {
            errorsArray.push('fileSize');
        }

        return errorsArray;
    }

    validateImage = (width, height) => {
        const { minWidth, maxWidth, minHeight, maxHeight, allowedFormats } = this.props;
        const imgFormat = getImageFormat(width, height);


        const errorsArray = [];

        if (minWidth !== 0 && minWidth >= width) {
            errorsArray.push('minWidth');
        }

        if (maxWidth !== 0 && maxWidth <= width) {
            errorsArray.push('maxWidth');
        }

        if (minHeight !== 0 && minHeight >= height) {
            errorsArray.push('minHeight');
        }

        if (maxHeight !== 0 && maxHeight <= height) {
            errorsArray.push('maxHeight');
        }

        if (allowedFormats.indexOf(imgFormat) < 0) {
            errorsArray.push('imageFormat');
        }

        return errorsArray;
    };

    readAsDataURL = file => {
        const reader = new FileReader();
        let src;

        reader.addEventListener("load", () => {
            src = reader.result;
            this.createImgNode(src);
        });

        reader.readAsDataURL(file);
    }

    createImgNode = src => {
        const img = document.createElement('img');
        img.src = src;
        const onFileReady = this.onFileReady;

        img.onload = function () {
            const width = this.width;
            const height = this.height;

            onFileReady(true, src, width, height);
        }
    }

    onFileReady = (previewable, src, width, height) => {
        let errorTypes = [...this.state.errorTypes]

        if (previewable) {
            const imgValidationErrors = this.validateImage(width, height);
            errorTypes = errorTypes.concat(imgValidationErrors)
        }

        errorTypes.length === 0
            ? this.setPreview(previewable, src, width, height)
            : this.setState({ errorTypes })
    }

    setPreview = (previewable, imgSrc, fileWidth, fileHeight) => {
        if (previewable === true) {
            this.setState({ preview: true, fileHeight, fileWidth, imgSrc })
        } else {
            this.setState({ preview: true });
        }

        this.props.getValue && this.props.getValue(this.state.file);
    };


    componentDidMount = () => {
        const { defaultFileSrc } = this.props;

        if (defaultFileSrc.trim() !== '') {
            let fileName = defaultFileSrc.split('\\').pop();
            if (fileName === defaultFileSrc) {
                fileName = defaultFileSrc.split('/').pop();
            }
            this.setState({ fileName }, () => this.createImgNode(defaultFileSrc))
        }
    }

    render() {
        const {
            errorMinWidth,
            errorMaxWidth,
            errorMinHeight,
            errorMaxHeight,
            errorImageFormat,
            errorFileExtension,
            errorFileSize,
            messageRemove,
            messageError,
            messageDefault,
            messageReplace,
            showErrors,
            showRemove,
            minWidth,
            maxWidth,
            minHeight,
            maxHeight,
            allowedFileExtensions,
            allowedFormats,
            maxFileSize,
            disabled,
            containerHeight,
            showSubmitButton,
            messageUpload,
            onSubmitHandler
        } = this.props;


        const { imgSrc, preview, fileName, fileExt } = this.state;

        let errorMessagesArray = [];
        this.state.errorTypes.forEach(errorType => {
            switch (errorType) {
                case 'minWidth':
                    errorMessagesArray.push(errorMinWidth || `The image width is too small (${minWidth}px min).`)
                    break;
                case 'maxWidth':
                    errorMessagesArray.push(errorMaxWidth || `The image width is too big (${maxWidth}px max).`)
                    break;
                case 'minHeight':
                    errorMessagesArray.push(errorMinHeight || `The image height is too small (${minHeight}px min).`)
                    break;
                case 'maxHeight':
                    errorMessagesArray.push(errorMaxHeight || `The image height is too big (${maxHeight}px max).`)
                    break;
                case 'imageFormat':
                    errorMessagesArray.push(errorImageFormat || `The image format is not allowed (${allowedFormats} only).`)
                    break;
                case 'fileExtension':
                    errorMessagesArray.push(errorFileExtension || `The file is not allowed (${allowedFileExtensions.join(", ")} only).`)
                    break;
                case 'fileSize':
                    errorMessagesArray.push(errorFileSize || `The file size is too big (${maxFileSize} max).`)
                    break;
                default:
                    errorMessagesArray.push(messageError)
                    break;
            }
        })

        return (
            <Fileupload
                name={fileName}
                fileExt={fileExt}
                src={imgSrc}
                preview={preview}
                errorMessagesArray={errorMessagesArray}
                onChangeHandler={this.onChangeHandler}
                removeHandler={this.resetPreview}
                onInputClick={this.onInputClick}
                messageError={messageError}
                messageRemove={messageRemove}
                messageDefault={messageDefault}
                messageReplace={messageReplace}
                showErrors={showErrors}
                showRemove={showRemove}
                disabled={disabled}
                containerHeight={containerHeight}
                showSubmitButton={showSubmitButton}
                messageUpload={messageUpload}
                onSubmitHandler={onSubmitHandler}
            />
        )
    }
}

fileuploadContainer.defaultProps = {
    messageDefault: 'Drag and drop a file here or click',
    messageReplace: 'Drag and drop or click to replace',
    messageRemove: 'Remove',
    messageError: 'Ooops, something wrong happended.',
    defaultFileSrc: '',
    maxFileSize: "2M",
    minWidth: 0,
    maxWidth: 0,
    minHeight: 0,
    maxHeight: 0,
    showRemove: true,
    showErrors: true,
    maxFileSizePreview: '5M',
    allowedFormats: ['portrait', 'square', 'landscape'],
    allowedFileExtensions: ['*'],
    disabled: false,
    containerHeight: 230,
    showSubmitButton: false,
    messageUpload: "Submit"
}

fileuploadContainer.propTypes = {
    messageDefault: PropTypes.string,
    messageReplace: PropTypes.string,
    messageRemove: PropTypes.string,
    messageError: PropTypes.string,
    defaultFileSrc: PropTypes.string,
    maxFileSize: PropTypes.string,
    minWidth: PropTypes.number,
    maxWidth: PropTypes.number,
    minHeight: PropTypes.number,
    maxHeight: PropTypes.number,
    showRemove: PropTypes.bool,
    showErrors: PropTypes.bool,
    maxFileSizePreview: PropTypes.string,
    allowedFormats: PropTypes.arrayOf(PropTypes.oneOf(['square', 'portrait', 'landscape'])),
    allowedFileExtensions: PropTypes.arrayOf(PropTypes.string),
    errorFileSize: PropTypes.string,
    errorMinWidth: PropTypes.string,
    errorMaxWidth: PropTypes.string,
    errorMinHeight: PropTypes.string,
    errorMaxHeight: PropTypes.string,
    errorImageFormat: PropTypes.string,
    errorFileExtension: PropTypes.string,
    disabled: PropTypes.bool,
    containerHeight: PropTypes.number,
    getValue: PropTypes.func,
    onSubmitHandler: PropTypes.func,
    showSubmitButton: PropTypes.bool
}


export default fileuploadContainer
