import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import {
  MDBInput,
  MDBBtn,
  MDBModal,
  MDBModalBody,
  MDBModalHeader,
  MDBModalFooter
} from "mdbreact";
import { startOfDay, endOfDay, parse, format, isAfter } from "date-fns";

function formatDate(date) {
  return format(date, "YYYY-MM-DDTHH:mm");
}

const TaskModal = ({
  alertMsg,
  createTask,
  day,
  endDay,
  deleteTask,
  isOpen,
  task,
  toggle,
  updateTask,
  modalControlLabels,
  addTaskTitle,
  editTaskTitle,
  modalFormLabels,
  colors
}) => {
  const [title, setTitle] = useState(task.title || "");
  const [startDate, setStartDate] = useState(
    day ? formatDate(startOfDay(day)) : formatDate(task.startDate)
  );
  const [endDate, setEndDate] = useState(
    day || endDay
      ? formatDate(endOfDay(endDay || day))
      : formatDate(task.endDate)
  );
  const [colored, setColor] = useState(task.color);
  const [darked, setDark] = useState(task.dark);
  useEffect(() => {
    const parsedStart = parse(startDate);
    const parsedEnd = parse(endDate);
    const isAft = isAfter(parsedEnd, parsedStart);
    if (
      !day &&
      isAft &&
      (task.title !== title ||
        task.startDate !== startDate ||
        task.endDate !== endDate ||
        task.color !== colored ||
        task.dark !== darked)
    ) {
      updateTask({
        id: task.id,
        title,
        startDate: parsedStart,
        endDate: parsedEnd,
        color: colored,
        dark: darked
      });
    }
  }, [title, startDate, endDate, colored, darked]);

  function formSubmit(e) {
    e.preventDefault();

    if (!isAfter(parse(endDate), parse(startDate))) {
      alert(alertMsg);
    } else {
      createTask({
        title,
        startDate: parse(startDate),
        endDate: parse(endDate),
        color: colored,
        dark: darked
      });
    }
  }
  return (
    <MDBModal isOpen={isOpen} toggle={toggle}>
      <MDBModalHeader toggle={toggle}>
        {!day && <span>{editTaskTitle}</span>}
        {day && <span>{addTaskTitle}</span>}
      </MDBModalHeader>
      <MDBModalBody>
        <form onSubmit={formSubmit}>
          <MDBInput
            required
            type="textarea"
            name="title"
            label={modalFormLabels[0]}
            value={title}
            onInput={e => setTitle(e.target.value)}
          />
          <MDBInput
            required
            type="datetime-local"
            name="start"
            label={modalFormLabels[1]}
            max={endDate}
            value={startDate}
            onChange={e => setStartDate(e.target.value)}
          />
          <MDBInput
            required
            type="datetime-local"
            name="end"
            label={modalFormLabels[2]}
            min={startDate}
            value={endDate}
            onChange={e => setEndDate(e.target.value)}
          />
          <span>{modalFormLabels[3]}</span>

          {colors.map(({ color, title, dark }) => {
            const splited = color.split("-")[0];
            return (
              <div
                key={color}
                className="custom-control custom-radio font-weight-bold"
                onClick={() => {
                  setColor(splited);
                  setDark(dark);
                }}
              >
                <input
                  type="radio"
                  className="custom-control-input"
                  id={color}
                  readOnly
                  checked={colored === splited}
                />
                <label
                  className={`custom-control-label text-${splited}`}
                  htmlFor={color}
                >
                  {title.charAt(0).toUpperCase() + title.slice(1)}
                </label>
              </div>
            );
          })}
        </form>
      </MDBModalBody>
      <MDBModalFooter>
        {!day && (
          <MDBBtn color="danger" onClick={() => deleteTask(task.id)}>
            {modalControlLabels[0]}
          </MDBBtn>
        )}
        <MDBBtn color="primary" onClick={toggle}>
          {modalControlLabels[1]}
        </MDBBtn>
        {day && (
          <MDBBtn color="success" onClick={formSubmit}>
            {modalControlLabels[2]}
          </MDBBtn>
        )}
      </MDBModalFooter>
    </MDBModal>
  );
};

TaskModal.propTypes = {
  alertMsg: PropTypes.string.isRequired,
  createTask: PropTypes.func.isRequired,
  deleteTask: PropTypes.func.isRequired,
  isOpen: PropTypes.bool.isRequired,
  toggle: PropTypes.func.isRequired,
  updateTask: PropTypes.func.isRequired,
  modalControlLabels: PropTypes.arrayOf(PropTypes.string).isRequired,
  addTaskTitle: PropTypes.string.isRequired,
  editTaskTitle: PropTypes.string.isRequired,
  modalFormLabels: PropTypes.arrayOf(PropTypes.string).isRequired,
  task: PropTypes.shape({
    color: PropTypes.string,
    endDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), Number]),
    id: PropTypes.string,
    endDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), Number]),
    title: PropTypes.string
  }),
  day: PropTypes.instanceOf(Date),
  colors: PropTypes.oneOfType([PropTypes.array, PropTypes.object])
};

export default TaskModal;
