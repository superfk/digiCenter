import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import {
  differenceInCalendarDays,
  format,
  addDays,
  subDays,
  differenceInHours,
  getDay,
  isSameWeek,
  isSameDay
} from "date-fns";
import { DraggableCore } from "react-draggable";
import { MDBLink } from "mdbreact";

const TaskBar = ({
  event,
  task: {
    id,
    title,
    startDate,
    endDate,
    color,
    dark,
    link,
    to,
    active,
    onClickLink
  },
  updateTask,
  weekDays,
  weekGrid,
  disable
}) => {
  if (differenceInHours(endDate, startDate) < 24 && weekGrid) {
    return null;
  }

  if (isSameDay(weekDays[0], endDate) && format(endDate, "HHmm") === "0000") {
    return null;
  }

  const [opacityShadow, setOpacityShadow] = useState("0");
  const [shadowX, setShadowX] = useState(0);
  const [translateShadow, setTranslateShadow] = useState({ x: 0, y: 0 });
  const [widthShadow, setWidthShadow] = useState("100%");
  const [colStart, setColStart] = useState(getDay(startDate) + 1);
  const [colEnd, setColEnd] = useState(
    getDay(endDate) + (format(endDate, "HHmm") !== "0000" ? 2 : 1)
  );

  useEffect(() => {
    if (!isSameWeek(startDate, endDate)) {
      if (!isSameWeek(startDate, weekDays[0])) {
        setColStart(1);
      } else {
        setColStart(getDay(startDate) + 1);
      }
      if (!isSameWeek(endDate, weekDays[0])) {
        setColEnd(8);
      } else {
        setColEnd(
          getDay(endDate) + (format(endDate, "HHmm") !== "0000" ? 2 : 1)
        );
      }
    }
  }, [startDate, endDate, weekDays]);

  function handleDragStart(e, data) {
    setOpacityShadow(".8");
    setWidthShadow("140px");

    const rect = data.node.getBoundingClientRect();
    setShadowX(
      e.pageX - rect.left - 140 * Math.floor((e.pageX - rect.left) / 140)
    );
  }

  function handleDrag(e, data) {
    const currentAreaDay = document
      .elementsFromPoint(e.clientX, e.clientY)
      .find(element => element.dataset.day);

    currentAreaDay && currentAreaDay.focus();

    setTranslateShadow({
      x: data.x - shadowX,
      y: data.y - 10 - data.deltaY
    });
  }

  function handleDragStop(e) {
    setOpacityShadow("0");
    setWidthShadow("100%");
    setShadowX(0);

    const dropAreaDay = document
      .elementsFromPoint(e.clientX, e.clientY)
      .find(element => element.dataset.day);
    const newStartDay = dropAreaDay ? dropAreaDay.dataset.day : startDate;

    const difference = differenceInCalendarDays(newStartDay, startDate);

    const newStartDate =
      difference < 0
        ? subDays(startDate, -difference)
        : addDays(startDate, difference);
    const newEndDate =
      difference < 0
        ? subDays(endDate, -difference)
        : addDays(endDate, difference);

    const newTask = {
      id,
      title,
      startDate: newStartDate,
      endDate: newEndDate,
      color,
      dark
    };

    if (difference !== 0 && translateShadow.x !== 0) {
      updateTask(newTask);
    } else {
      setTranslateShadow({
        x: 0,
        y: 0
      });
    }
  }

  const style = {
    gridColumn: `${colStart} / ${colEnd}`
  };

  const shadowStyle = {
    width: widthShadow,
    opacity: opacityShadow,
    transform: `translate(${translateShadow.x}px, ${translateShadow.y}px)`
  };
  return (
    <div
      style={style}
      className={`task-bar ${color}-color${dark ? "-dark" : ""}`}
      onClick={() => event({ id, title, startDate, endDate, color, dark })}
    >
      <span className="task-bar__title">{title}</span>
      {!link ? (
        <DraggableCore
          onStart={handleDragStart}
          onDrag={handleDrag}
          onStop={handleDragStop}
          disabled={disable}
        >
          <div
            style={shadowStyle}
            className={`task-bar--shadow ${color}-color${dark ? "-dark" : ""}`}
            onClick={() => console.log("lol")}
          >
            <span className="task-bar__title">{title}</span>
          </div>
        </DraggableCore>
      ) : (
        <div
          style={shadowStyle}
          className={`task-bar--shadow ${color}-color${dark ? "-dark" : ""}`}
        >
          <MDBLink to="#" link to={to} active={active} onClick={onClickLink}>
            <span className="task-bar__title">{title}</span>
          </MDBLink>
        </div>
      )}
    </div>
  );
};

TaskBar.propTypes = {
  event: PropTypes.func.isRequired,
  task: PropTypes.shape({
    color: PropTypes.string,
    endDate: PropTypes.oneOfType([
      PropTypes.number,
      PropTypes.instanceOf(Date)
    ]),
    id: PropTypes.string,
    startDate: PropTypes.oneOfType([
      PropTypes.number,
      PropTypes.instanceOf(Date)
    ]),
    title: PropTypes.string
  }).isRequired,
  weekDays: PropTypes.arrayOf(PropTypes.instanceOf(Date)).isRequired,
  weekGrid: PropTypes.bool,
  disable: PropTypes.bool
};

export default TaskBar;
