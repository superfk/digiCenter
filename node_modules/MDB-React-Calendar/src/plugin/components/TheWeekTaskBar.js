import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import {
  differenceInCalendarDays,
  isSameDay,
  isSameHour,
  format,
  differenceInHours,
  subHours,
  addHours,
  parse,
  isSameWeek
} from "date-fns";
import { DraggableCore } from "react-draggable";
import { MDBLink } from "mdbreact";

function findIndex(allTasks, id, dates) {
  const sameTasks = allTasks.filter(
    item =>
      isSameDay(item.startDate, dates[0]) ||
      isSameDay(item.endDate, dates[1]) ||
      isSameDay(item.startDate, dates[1])
  );
  return sameTasks.findIndex(item => item.id === id);
}

const WeekTaskBar = ({
  allTasks,
  event,
  task: {
    id,
    startDate,
    endDate,
    title,
    color,
    dark,
    link,
    to,
    active,
    onClickLink
  },
  index,
  updateTask,
  weekStart,
  disable
}) => {
  const [bars, setBars] = useState([]);
  const [dates, setDates] = useState([startDate, endDate]);

  let colIndex = findIndex(allTasks, id, dates);
  colIndex = colIndex < 0 ? 0 : colIndex;
  const inHoursDifference = differenceInHours(dates[1], dates[0]);

  if (inHoursDifference > 24) return null;

  useEffect(() => {
    const areSameWeek = isSameWeek(dates[0], dates[1]);
    const isThisWeek = isSameWeek(dates[0], weekStart);

    const firstRowStart = isThisWeek ? parseInt(format(dates[0], "H")) + 1 : 1;
    const rowEnd =
      areSameWeek || !isThisWeek ? parseInt(format(dates[1], "H")) + 2 : 25;
    const firstColStart = isThisWeek
      ? differenceInCalendarDays(dates[0], weekStart) * 5 + 1 + colIndex
      : 1 + colIndex;
    const secondColStart = isThisWeek
      ? differenceInCalendarDays(dates[1], weekStart) * 5 + 1 + colIndex
      : 1 + colIndex;

    if (!isSameDay(dates[0], dates[1]) && areSameWeek) {
      setBars([
        {
          gridRowStart: firstRowStart,
          gridRowEnd: 25,
          gridColumnStart: firstColStart,
          gridColumnEnd: firstColStart + 1
        },
        {
          gridRowStart: 1,
          gridRowEnd: rowEnd,
          gridColumnStart: secondColStart,
          gridColumnEnd: secondColStart + 1
        }
      ]);
    } else {
      setBars([
        {
          gridRowStart: firstRowStart,
          gridRowEnd: rowEnd,
          gridColumnStart: firstColStart,
          gridColumnEnd: firstColStart + 1
        }
      ]);
    }
  }, [dates, index, weekStart]);

  function handleDrag(e) {
    const currentDay = document
      .elementsFromPoint(e.clientX, e.clientY)
      .find(element => element.dataset.day);

    if (!currentDay) return;

    const newStartDate = parse(currentDay.dataset.day);

    const difference = differenceInHours(newStartDate, dates[0]);

    const newEndDate =
      difference < 0
        ? subHours(dates[1], -difference)
        : addHours(dates[1], difference);

    if (
      !isSameHour(dates[0], newStartDate) ||
      !isSameDay(dates[0], newStartDate)
    ) {
      setDates([newStartDate, newEndDate]);
    }
  }

  function handleDragStop() {
    const newTask = {
      id,
      title,
      startDate: dates[0],
      endDate: dates[1],
      color
    };

    if (!isSameHour(dates[0], startDate) || !isSameDay(dates[0], startDate)) {
      updateTask(newTask);
    }
  }

  return bars.map((bar, index) => {
    return !link ? (
      <DraggableCore
        key={index}
        onDrag={handleDrag}
        onStop={handleDragStop}
        disable={disable}
      >
        <div
          onClick={() => event({ id, startDate, endDate, title, color, dark })}
          style={{
            gridRow: `${bar.gridRowStart} / ${bar.gridRowEnd}`,
            gridColumn: `${bar.gridColumnStart} / ${bar.gridColumnEnd}`
          }}
          className={`task-bar ${color}${dark ? "-color-dark" : "-color"}`}
        >
          <span className="task-bar__title">{title}</span>
        </div>
      </DraggableCore>
    ) : (
      <div
        onClick={() => event({ id, startDate, endDate, title, color, dark })}
        style={{
          gridRow: `${bar.gridRowStart} / ${bar.gridRowEnd}`,
          gridColumn: `${bar.gridColumnStart} / ${bar.gridColumnEnd}`
        }}
        className={`task-bar ${color}${dark ? "-color-dark" : "-color"}`}
      >
        <MDBLink
          to={to}
          active={active}
          onClick={onClickLink}
          link
          style={{ color: "#fff", display: "inline", position: "static" }}
        >
          <span className="task-bar__title">{title}</span>
        </MDBLink>
      </div>
    );
  });
};

WeekTaskBar.propTypes = {
  event: PropTypes.func.isRequired,
  task: PropTypes.shape({
    color: PropTypes.string,
    endDate: PropTypes.oneOfType([
      PropTypes.number,
      PropTypes.instanceOf(Date)
    ]),
    id: PropTypes.string,
    startDate: PropTypes.oneOfType([
      PropTypes.number,
      PropTypes.instanceOf(Date)
    ]),
    title: PropTypes.string
  }).isRequired,
  index: PropTypes.number.isRequired,
  updateTask: PropTypes.func.isRequired,
  weekStart: PropTypes.instanceOf(Date).isRequired,
  disable: PropTypes.bool
};

export default WeekTaskBar;
