import React, { Component } from 'react';
import uuidv1 from 'uuid/v1';
import PropTypes from 'prop-types';
import { isSameWeek } from 'date-fns';
import enLocale from 'date-fns/locale/en';
import './styles/styles.css';
import { MonthGrid, WeekGrid, ListGrid } from './views';
import { SwitchButtons, CalendarHeader, TaskModal } from './components';
import { changeDate, getWeeks, getHours, addTasksToWeek } from './helpers';

class FullCalendar extends Component {
  constructor(props) {
    super(props);
    this.state = {
      activeDate: this.props.startDate,
      activeView: 'month',
      month: [],
      week: [],
      hours: [],
      isModalOpen: false,
      taskToUpdate: {},
      dayToUpdate: null,
      endDayToUpdate: null,
      tasks: this.props.tasks,
      locale: this.props.locale,
      weekFormat: this.props.weekFormat,
      listFormat: this.props.listFormat,
      controlLabels: this.props.controlLabels,
      modalControlLabels: this.props.modalControlLabels,
      addTaskTitle: this.props.addTaskTitle,
      editTaskTitle: this.props.editTaskTitle,
      modalFormLabels: this.props.modalFormLabels,
      alertModalMsg: this.props.alertModalMsg,
      confirmDeleteMsg: this.props.confirmDeleteMsg,
      initialLink: this.props.link,
    };
  }

  componentDidMount() {
    this.getWeeks(this.state.activeDate);

    // hours needs to be generated only once
    this.getHours(this.state.activeDate);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.activeDate !== this.state.activeDate) {
      this.getWeeks(this.state.activeDate);
    }

    if (prevState.tasks !== this.state.tasks) {
      if (this.props.onChange) {
        this.props.onChange(this.state.tasks);
      }

      this.getWeeks(this.state.activeDate);
    }

    if (this.props.tasks !== prevProps.tasks && this.state.tasks !== this.props.tasks) {
      this.setState({ tasks: this.props.tasks });
    }

    if (this.props.locale !== prevState.locale) {
      this.setState({ locale: this.props.locale });
    }

    if (this.props.weekFormat !== prevState.weekFormat) {
      this.setState({ weekFormat: this.props.weekFormat });
    }

    if (this.props.listFormat !== prevState.listFormat) {
      this.setState({ listFormat: this.props.listFormat });
    }

    if (this.props.controlLabels !== prevState.controlLabels) {
      this.setState({ controlLabels: this.props.controlLabels });
    }

    if (this.props.modalControlLabels !== prevState.modalControlLabels) {
      this.setState({ modalControlLabels: this.props.modalControlLabels });
    }

    if (this.props.addTaskTitle !== prevState.addTaskTitle) {
      this.setState({ addTaskTitle: this.props.addTaskTitle });
    }

    if (this.props.editTaskTitle !== prevState.editTaskTitle) {
      this.setState({ editTaskTitle: this.props.editTaskTitle });
    }

    if (this.props.modalFormLabels !== prevState.modalFormLabels) {
      this.setState({ modalFormLabels: this.props.modalFormLabels });
    }

    if (this.props.alertModalMsg !== prevState.alertModalMsg) {
      this.setState({ alertModalMsg: this.props.alertModalMsg });
    }

    if (this.props.confirmDeleteMsg !== prevState.confirmDeleteMsg) {
      this.setState({ confirmDeleteMsg: this.props.confirmDeleteMsg });
    }
  }

  getWeeks = (date) => {
    const month = getWeeks(date, true);
    const week = month.filter((week) => isSameWeek(week.days[0], this.state.activeDate))[0];

    if (this.state.tasks.length) {
      const monthWithTasks = month.map((week) => addTasksToWeek(week, this.state.tasks));
      const weekWithTasks = monthWithTasks.filter((week) => isSameWeek(week.days[0], this.state.activeDate))[0];
      this.setState({ month: monthWithTasks, week: weekWithTasks });
    } else {
      this.setState({ month, week });
    }
  };

  getHours = (date) => {
    const hours = getHours(date);
    this.setState({ hours });
  };

  changeView = (activeView) => this.setState({ activeView });

  changeDate = (amount) => {
    const newDate = changeDate(this.state.activeView, this.state.activeDate, amount);
    this.setState({ activeDate: newDate });
  };

  createTask = (task) =>
    this.setState((prevState) => {
      return {
        tasks: [
          ...prevState.tasks,
          {
            id: uuidv1(),
            editDate: new Date(),
            ...task,
          },
        ],
        isModalOpen: false,
      };
    });

  updateTask = (task) =>
    this.setState((prevState) => {
      task.editDate = new Date();
      let tasks = [...prevState.tasks];
      let taskIndex = tasks.findIndex((item) => item.id === task.id);
      tasks[taskIndex] = task;
      tasks.sort((a, b) => a.editDate - b.editDate);
      return { tasks };
    });

  deleteTask = (id) => {
    if (!window.confirm(this.state.confirmDeleteMsg)) return;

    this.setState((prevState) => {
      return {
        tasks: prevState.tasks.filter((task) => task.id !== id),
        isModalOpen: false,
      };
    });
  };

  openModal = (taskToUpdate, dayToUpdate, endDayToUpdate) => {
    const { disableEvents } = this.props;
    const { isModalOpen } = this.state;

    if (!disableEvents) {
      this.setState({
        isModalOpen: !isModalOpen,
        taskToUpdate,
        dayToUpdate,
        endDayToUpdate,
      });
    }
  };

  toggleModal = () => {
    const { disableEvents } = this.props;
    const { isModalOpen } = this.state;

    if (!disableEvents) {
      this.setState({ isModalOpen: !isModalOpen });
    }
  };

  render() {
    const {
      activeDate,
      activeView,
      addTaskTitle,
      alertModalMsg,
      controlLabels,
      dayToUpdate,
      editTaskTitle,
      endDayToUpdate,
      hours,
      initialLink,
      isModalOpen,
      listFormat,
      locale,
      modalControlLabels,
      modalFormLabels,
      month,
      tasks,
      taskToUpdate,
      week,
      weekFormat,
    } = this.state;

    const { colors, disableEvents, btnSizes, btnSizesClassName, btnSizesColorsToday, btnSizesColorsMonthWeekList } = this.props;

    return (
      <div className='full-calendar-plugin'>
        <div className='calendar-controls'>
          <SwitchButtons
            btnSizesClassName={btnSizesClassName}
            btnSizes={btnSizes}
            btnSizesColors={btnSizesColorsToday}
            texts={[<i className='fa fa-chevron-left' />, <i className='fa fa-chevron-right' />, controlLabels[0]]}
            leftEvt={() => this.changeDate(-1)}
            middleEvt={() => this.changeDate(1)}
            rightEvt={() => this.changeDate(0)}
          />

          <CalendarHeader activeView={activeView} activeDate={activeDate} locale={locale} />

          <SwitchButtons
            btnSizesClassName={btnSizesClassName}
            btnSizes={btnSizes}
            btnSizesColors={btnSizesColorsMonthWeekList}
            texts={controlLabels.slice(1)}
            active={activeView === 'month' ? 0 : activeView === 'week' ? 1 : 2}
            leftEvt={() => this.changeView('month')}
            middleEvt={() => this.changeView('week')}
            rightEvt={() => this.changeView('list')}
          />
        </div>

        <div className='calendar-grid mt-3'>
          {activeView === 'month' && (
            <MonthGrid
              activeDate={activeDate}
              month={month}
              tasks={tasks}
              updateTask={this.updateTask}
              openModal={this.openModal}
              locale={locale}
              disable={disableEvents}
              link={initialLink}
            />
          )}
          {activeView === 'week' && (
            <WeekGrid
              week={week}
              hours={hours}
              tasks={tasks}
              updateTask={this.updateTask}
              openModal={this.openModal}
              locale={locale}
              timeFormat={weekFormat}
              disable={disableEvents}
              link={initialLink}
            />
          )}
          {activeView === 'list' && (
            <ListGrid
              week={week}
              hours={hours}
              tasks={tasks}
              updateTask={this.updateTask}
              openModal={this.openModal}
              locale={locale}
              timeFormat={listFormat}
              disable={disableEvents}
            />
          )}
        </div>

        {isModalOpen && (
          <TaskModal
            alertMsg={alertModalMsg}
            isOpen={isModalOpen}
            task={taskToUpdate}
            day={dayToUpdate}
            endDay={endDayToUpdate}
            createTask={this.createTask}
            updateTask={this.updateTask}
            deleteTask={this.deleteTask}
            toggle={this.toggleModal}
            modalControlLabels={modalControlLabels}
            addTaskTitle={addTaskTitle}
            editTaskTitle={editTaskTitle}
            modalFormLabels={modalFormLabels}
            colors={colors}
          />
        )}
      </div>
    );
  }
}

FullCalendar.propTypes = {
  addTaskTitle: PropTypes.string,
  alertModalMsg: PropTypes.string,
  colors: PropTypes.array,
  confirmDeleteMsg: PropTypes.string,
  controlLabels: PropTypes.arrayOf(PropTypes.string),
  editTaskTitle: PropTypes.string,
  listFormat: PropTypes.string,
  locale: PropTypes.object,
  modalControlLabels: PropTypes.arrayOf(PropTypes.string),
  modalFormLabels: PropTypes.arrayOf(PropTypes.string),
  onChange: PropTypes.func,
  startDate: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),
  tasks: PropTypes.arrayOf(
    PropTypes.shape({
      color: PropTypes.string,
      endDate: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),
      id: PropTypes.string,
      startDate: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),
      title: PropTypes.string,
    })
  ),
  weekFormat: PropTypes.string,
  btnSizes: PropTypes.string,
  btnSizesColorsToday: PropTypes.array,
  btnSizesClassName: PropTypes.string,
};

FullCalendar.defaultProps = {
  alertModalMsg: "Task's endDate must be after startDate!",
  confirmDeleteMsg: 'Are you sure you want to delete this task?',
  colors: [
    'elegant-color',
    'danger-color',
    'warning-color',
    'success-color',
    'info-color',
    'default-color',
    'primary-color',
    'secondary-color',
  ],
  locale: enLocale,
  weekFormat: 'ha',
  listFormat: 'hh:mma',
  tasks: [],
  startDate: new Date(),
  controlLabels: ['Today', 'Month', 'Week', 'List'],
  modalControlLabels: ['Delete', 'Close', 'Add'],
  addTaskTitle: 'Add task',
  editTaskTitle: 'Edit task',
  modalFormLabels: ['Title', 'Start', 'End', 'Color'],
  disableEvents: false,
  btnSizesColorsToday: ['info', 'info', 'info'],
  btnSizesColorsMonthWeekList: ['info', 'info', 'info'],
};

export default FullCalendar;
