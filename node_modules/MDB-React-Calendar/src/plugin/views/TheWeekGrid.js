import React from "react";
import PropTypes from "prop-types";
import { format, isToday, setHours } from "date-fns";

import { TableCell, TaskBar, WeekTaskBar } from "../components";

const TheWeekGrid = ({
  hours,
  week,
  updateTask,
  openModal,
  locale,
  timeFormat,
  disable
}) => {
  return (
    <div>
      <div className="grid-row">
        <TableCell />
        {week.days.map(day => (
          <TableCell head today={isToday(day)} key={day}>
            {format(day, "ddd DD/MM", { locale: locale })}
          </TableCell>
        ))}
      </div>
      <div className="grid-row week">
        <TableCell double head></TableCell>
        {week.days.map(day => (
          <TableCell
            double
            today={isToday(day)}
            day={day}
            key={day}
            event={openModal}
          />
        ))}
        <div
          className="week-presentation"
          style={{ gridColumn: "2/9", top: 0 }}
        >
          {week.tasks.map((task, taskIndex) => (
            <TaskBar
              key={`${task.startDate}${task.endDate}${task.id}`}
              taskIndex={taskIndex}
              task={task}
              weekDays={week.days}
              updateTask={updateTask}
              weekGrid
              event={openModal}
            />
          ))}
        </div>
      </div>
      <div className="week week-grid">
        {hours.map(hour => (
          <React.Fragment key={hour}>
            <TableCell head>{format(hour, timeFormat)}</TableCell>
            {week.days.map(day => (
              <TableCell
                day={setHours(day, format(hour, "H"))}
                today={isToday(day)}
                key={day}
                event={openModal}
              />
            ))}
          </React.Fragment>
        ))}
        <div className="week-presentation">
          {week.tasks.map((task, index) => (
            <WeekTaskBar
              key={`${task.startDate}${task.endDate}${task.id}`}
              updateTask={updateTask}
              task={task}
              index={index}
              allTasks={week.tasks}
              weekStart={week.days[0]}
              event={openModal}
              disable={disable}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

TheWeekGrid.propTypes = {
  hours: PropTypes.arrayOf(PropTypes.instanceOf(Date)).isRequired,
  week: PropTypes.shape({
    days: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
    tasks: PropTypes.arrayOf(PropTypes.object)
  }).isRequired,
  updateTask: PropTypes.func.isRequired,
  openModal: PropTypes.func.isRequired,
  locale: PropTypes.object.isRequired,
  timeFormat: PropTypes.string.isRequired,
  disable: PropTypes.bool
};

export default TheWeekGrid;
