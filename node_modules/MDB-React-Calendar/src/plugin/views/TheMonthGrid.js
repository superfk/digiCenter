import React, { useState } from "react";
import PropTypes from "prop-types";
import { format, isSameMonth, isToday, parse } from "date-fns";

import { TableCell, TaskBar } from "../components";

const TheMonthGrid = ({
  activeDate,
  month,
  updateTask,
  openModal,
  locale,
  disable
}) => {
  const [drag, setDrag] = useState(false);
  const [dragStart, setStart] = useState(null);

  function handleMouseDown(e) {
    if (!e.ctrlKey) return;

    setDrag(true);

    const currentAreaDay = document
      .elementsFromPoint(e.clientX, e.clientY)
      .find(element => element.dataset.day);
    setStart(parse(currentAreaDay.dataset.day));
  }

  function handleMouseUp(e) {
    if (!drag) return;

    setDrag(false);

    const currentAreaDay = document
      .elementsFromPoint(e.clientX, e.clientY)
      .find(element => element.dataset.day);

    openModal({}, dragStart, parse(currentAreaDay.dataset.day));
  }

  if (month.length) {
    return (
      <div
        className="month-grid"
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
      >
        <div className="grid-row">
          {month[0].days.map(day => (
            <TableCell head key={day}>
              {format(day, "ddd", { locale: locale })}
            </TableCell>
          ))}
        </div>
        {month.map(week => {
          return (
            <div
              key={week.days[0]}
              className="grid-row week"
              style={{
                height: `${
                  week.tasks.length > 3
                    ? `calc(14vh + ${week.tasks.length - 4}*24px)`
                    : `14vh`
                }`
              }}
            >
              {week.days.map(day => (
                <TableCell
                  key={day}
                  day={day}
                  notCurrMonth={!isSameMonth(activeDate, day)}
                  today={isToday(day)}
                  event={openModal}
                >
                  {format(day, "D", { locale: locale })}
                </TableCell>
              ))}
              <div className="week-presentation">
                {week.tasks.map((task, taskIndex) => (
                  <TaskBar
                    key={`${task.startDate}${task.endDate}${task.id}`}
                    taskIndex={taskIndex}
                    task={task}
                    weekDays={week.days}
                    updateTask={updateTask}
                    event={openModal}
                    disable={disable}
                  />
                ))}
              </div>
            </div>
          );
        })}
      </div>
    );
  }

  return null;
};

TheMonthGrid.propTypes = {
  activeDate: PropTypes.instanceOf(Date).isRequired,
  month: PropTypes.arrayOf(
    PropTypes.shape({
      days: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
      tasks: PropTypes.arrayOf(PropTypes.object)
    })
  ).isRequired,
  updateTask: PropTypes.func.isRequired,
  openModal: PropTypes.func.isRequired,
  locale: PropTypes.object.isRequired,
  disable: PropTypes.bool
};

export default TheMonthGrid;
