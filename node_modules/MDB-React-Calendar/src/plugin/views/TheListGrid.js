import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import {
  format,
  isSameDay,
  subMinutes,
  isBefore,
  differenceInMinutes
} from "date-fns";

import { TableCell } from "../components";
import { MDBLink } from "mdbreact";

function sort(items) {
  return items.sort((a, b) => (isBefore(a.startDate, b.startDate) ? -1 : 1));
}

const TheListGrid = ({ week, openModal, locale, timeFormat, disable }) => {
  const [tasks, setTasks] = useState(sort(week.tasks));

  useEffect(() => {
    if (tasks !== week.tasks) {
      setTasks(sort(week.tasks));
    }
  }, [week]);

  if (!tasks.length) {
    return (
      <div>
        <ul className="list-grid">
          <TableCell head list>
            <span>
              <i className="fa fa-calendar-alt" />{" "}
              {`${format(week.days[0], "DD.MM.YYYY", {
                locale: locale
              })} - ${format(week.days[6], "DD.MM.YYYY", { locale: locale })}`}
            </span>
            <span>
              <i className="fa fa-clock" /> all-day
            </span>
          </TableCell>
          <TableCell list event={() => openModal({}, week.days[0])}>
            <div className={`task-color`} />
            <span>---------</span>
          </TableCell>
        </ul>
      </div>
    );
  }
  return (
    <div>
      <ul className="list-grid">
        {tasks.map(task => (
          <React.Fragment key={task.id}>
            <TableCell head list>
              <span>
                <i className="fa fa-calendar-alt" />{" "}
                {isSameDay(task.startDate, subMinutes(task.endDate, 1))
                  ? format(task.startDate, "DD.MM.YYYY", { locale: locale })
                  : `${format(task.startDate, "DD.MM.YYYY", {
                      locale: locale
                    })} - ${format(task.endDate, "DD.MM.YYYY", {
                      locale: locale
                    })}`}
              </span>
              <span>
                <i className="fa fa-clock" />{" "}
                {differenceInMinutes(task.endDate, task.startDate) < 1440
                  ? `${format(task.startDate, timeFormat)} - ${format(
                      task.endDate,
                      timeFormat
                    )}`
                  : "all-day"}
              </span>
            </TableCell>
            <TableCell list event={() => !disable && openModal(task)}>
              <div className={`task-color ${task.color}`} />
              {!task.link ? (
                <span>{task.title}</span>
              ) : (
                <MDBLink
                  to={task.to}
                  active={task.active}
                  onClick={task.onClickList}
                  style={{ padding: "unset", color: "#000", width: "100%" }}
                >
                  <span>{task.title}</span>
                </MDBLink>
              )}
            </TableCell>
          </React.Fragment>
        ))}
      </ul>
    </div>
  );
};

TheListGrid.propTypes = {
  week: PropTypes.shape({
    days: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
    tasks: PropTypes.arrayOf(PropTypes.object)
  }).isRequired,
  openModal: PropTypes.func.isRequired,
  locale: PropTypes.object.isRequired,
  timeFormat: PropTypes.string.isRequired
};

TheListGrid.defaultProps = {
  disable: false
};

export default TheListGrid;
