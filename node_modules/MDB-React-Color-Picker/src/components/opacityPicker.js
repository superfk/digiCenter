import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

class OpacityPicker extends PureComponent {
    canvasRef = React.createRef();
    canvas = null;
    drag = false;

    componentDidMount = () => {
        this.drawGradient();
        document.addEventListener('mouseup', this.dragStop);
    }

    componentWillUnmount = () => {
        document.removeEventListener('mouseup', this.dragStop)
    }

    componentDidUpdate = () => {
        this.drawGradient();
    }

    drawGradient = () => {
        this.canvas = this.canvasRef.current.getContext("2d");
        const colorGradient = this.canvas.createLinearGradient(0, this.props.stripHeight, 0, 0);
        colorGradient.addColorStop(0, this.props.selectedColor);
        colorGradient.addColorStop(1, 'rgb(255,255,255)');
        this.canvas.fillStyle = colorGradient;

        this.canvas.fillRect(0, 0, this.props.stripWidth, this.props.stripHeight);
    }

    setOpacity = e => {
        e.persist();

        const offsetY = e.nativeEvent.offsetY;
        const opacity = parseFloat((offsetY / this.props.stripHeight).toFixed(2));

        this.props.setOpacity(opacity);
    }

    onMouseDownHandler = e => {
        this.drag = true;
        this.setOpacity(e);
    }

    dragStop = () => {
        this.drag = false;
    }

    onMouseMoveHandler = e => {
        if (this.drag) {
            this.setOpacity(e);
        }
    }

    render() {
        return (
            <div className="mdb-cp-strip-wrapper">
                <div className="mdb-cp-opacity-picker" style={{ top: (this.props.opacity * this.props.stripHeight + 'px'), left: (this.props.stripWidth / 2 - 4 + 'px'), backgroundColor: this.props.selectedColor, pointerEvents: 'none' }}></div>
                <canvas
                    className="mdb-cp-strip mdb-cp-opacity-slider"
                    height={this.props.stripHeight}
                    width={this.props.stripWidth}
                    ref={this.canvasRef}
                    onDragStart={() => false}
                    onDrag={() => false}
                    onMouseDown={this.onMouseDownHandler}
                    onTouchStart={this.onMouseDownHandler}
                    onMouseMove={this.onMouseMoveHandler}
                    onTouchMove={this.onMouseMoveHandler}
                    onMouseUp={this.onMouseUpHandler}
                    onTouchEnd={this.onMouseUpHandler}
                ></canvas>
            </div>
        );
    }
}

OpacityPicker.propTypes = {
    stripHeight: PropTypes.number.isRequired,
    stripWidth: PropTypes.number.isRequired,
    selectedColor: PropTypes.string.isRequired,
    setOpacity: PropTypes.func.isRequired
}

export default OpacityPicker;