import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

class HuePicker extends PureComponent {
    canvasRef = React.createRef();
    canvas = null;
    drag;

    componentDidMount = () => {
        this.drawGradient();
        document.addEventListener('mouseup', this.dragStop)
    }

    componentWillUnmount = () => {
        document.removeEventListener('mouseup', this.dragStop)
    }

    componentDidUpdate = () => {
        this.drawGradient();
    }


    drawGradient = () => {
        this.canvas = this.canvasRef.current.getContext("2d");
        this.canvas.rect(0, 0, this.props.stripWidth, this.props.stripHeight);

        let gradient = this.canvas.createLinearGradient(0, 0, 0, 168);
        gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');
        gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');
        gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');
        gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');
        gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');
        gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');
        gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');
        this.canvas.fillStyle = gradient;
        this.canvas.fill();
    }

    dragStop = () => {
        this.drag = false;
    }

    onMouseDownHandler = e => {
        this.drag = true;
        this.setHoue(e);
    }

    onMouseMoveHandler = e => {
        if (this.drag) {
            this.setHoue(e);
        }
    }

    setHoue = e => {
        e.persist();

        const offsetY = e.nativeEvent.offsetY;
        const offsetX = this.props.stripWidth / 2;
        const hueOffset = (offsetY / this.props.stripHeight).toFixed(2);

        const palleteData = this.canvas.getImageData(offsetX, offsetY, 1, 1).data
        const rgbaColor = `rgba(${palleteData[0]}, ${palleteData[1]}, ${palleteData[2]}, ${this.props.opacity})`;

        this.props.setHue(rgbaColor, hueOffset);
    }

    render() {
        return (
            <div className="mdb-cp-strip-wrapper">
                <div className="mdb-cp-strip-picker" style={{ top: (this.props.hueOffset * this.props.stripHeight + 'px'), left: (this.props.stripWidth / 2 - 4 + 'px'), backgroundColor: this.props.selectedColor, pointerEvents: 'none' }}></div>
                <canvas
                    className="mdb-cp-strip"
                    height={this.props.stripHeight}
                    width={this.props.stripWidth}
                    onDragStart={() => false}
                    onDrag={() => false}
                    onMouseDown={this.onMouseDownHandler}
                    onTouchStart={this.onMouseDownHandler}
                    onMouseMove={this.onMouseMoveHandler}
                    onTouchMove={this.onMouseMoveHandler}
                    onMouseUp={this.onMouseUpHandler}
                    onTouchEnd={this.onMouseUpHandler}
                    ref={this.canvasRef}
                ></canvas>
            </div>
        );
    }
}

HuePicker.propTypes = {
    stripHeight: PropTypes.number.isRequired,
    stripWidth: PropTypes.number.isRequired,
    selectedColor: PropTypes.string.isRequired,
    opacity: PropTypes.number.isRequired,
    setHue: PropTypes.func.isRequired
}


export default HuePicker;