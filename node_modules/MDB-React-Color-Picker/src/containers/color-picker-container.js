import React, { Component } from 'react';
import { Transition } from 'react-transition-group';
import PropTypes from 'prop-types';
import { ColorsPreview, ColorPallette, OpacityPicker, HuePicker, Controllers, ClickOutside } from '../components'
import { getAllColorSystemValues, readColorOpacity } from '../utils/'
import '../styles/index.css';

class ColorPickerContainer extends Component {
    state = {
        lastColor: this.props.rgbaColor,
        palleteColor: this.props.rgbaColor,
        selectedColor: this.props.rgbaColor,
        currentColorLabel: getAllColorSystemValues(this.props.rgbaColor)[this.props.colorSpace],
        colorSpace: this.props.colorSpace,
        opacity: readColorOpacity(this.props.rgbaColor),
        hueOffset: 0,
        x: 0,
        y: 0,
        isOpen: true,
        colorValue: getAllColorSystemValues(this.props.rgbaColor)
    }

    saveColor = (rgba = this.state.selectedColor, currentColorLabel = this.state.currentColorLabel) => {
        const regex = /rgba?\(((25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,\s*?){2}(25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,?\s*([01]\.?\d*?)?\)/;
        const regexInstance = new RegExp(regex);

        if (regexInstance.test(rgba)) {
            const colorValue = getAllColorSystemValues(rgba);
            this.props.getValue && this.props.getValue(colorValue);

            this.setState({
                selectedColor: rgba,
                lastColor: rgba,
                palleteColor: rgba,
                currentColorLabel,
                colorValue
            });
        }

        this.setState({ currentColorLabel })
    }

    clearColor = () => {
        const colorValue = getAllColorSystemValues(this.state.lastColor);
        const currentColorLabel = colorValue[this.state.colorSpace];

        this.setState({
            selectedColor: this.state.lastColor,
            currentColorLabel,
            colorValue
        })
    }

    updateSelectedColor = (rgbaColor, x, y) => {
        const colorValue = getAllColorSystemValues(rgbaColor);
        const currentColorLabel = colorValue[this.state.colorSpace];

        this.setState({ selectedColor: rgbaColor, colorValue, currentColorLabel, x, y })
    }

    changeColorSpace = colorSpace => () => {
        const { colorValue } = this.state;
        const currentColorLabel = colorValue[colorSpace];

        this.setState({ colorSpace, currentColorLabel });
    }

    setOpacity = opacity => {
        const splitRGBAcolorArray = this.state.selectedColor.split(",");
        splitRGBAcolorArray[3] = ` ${opacity})`
        const rgbaColor = splitRGBAcolorArray.join(',');

        const colorValue = getAllColorSystemValues(rgbaColor);
        const currentColorLabel = colorValue[this.state.colorSpace];

        this.setState({
            selectedColor: rgbaColor,
            currentColorLabel,
            opacity,
            colorValue
        });
    }

    setHue = (rgbaColor, hueOffset) => {
        const colorValue = getAllColorSystemValues(rgbaColor);
        const currentColorLabel = colorValue[this.state.colorSpace];

        this.setState({
            selectedColor: rgbaColor,
            palleteColor: rgbaColor,
            currentColorLabel,
            hueOffset,
            colorValue
        })
    }

    setLastColor = () => {
        const colorValue = getAllColorSystemValues(this.state.lastColor);
        const currentColorLabel = colorValue[this.state.colorSpace];

        this.setState({
            palleteColor: this.state.lastColor,
            selectedColor: this.state.lastColor,
            currentColorLabel,
            colorValue
        })
    }


    render() {

        const defaultStyle = {
            transition: `all ${this.props.transitionDuration}ms ${this.props.transitionType}`,
            opacity: 0,
        }

        const transitionStyles = {
            entering: { opacity: 0 },
            entered: { opacity: 1 },
            exited: { opacity: 0, display: "none" },
        };

        return (

            <ClickOutside close={this.props.close} isOpen={this.props.isOpen} >
                <div>
                    {this.props.children}
                    <Transition in={this.props.isOpen} timeout={this.props.transitionDuration}>
                        {state => {
                            return (
                                <div className="mdb-cp-app"
                                    style={{
                                        ...defaultStyle,
                                        ...transitionStyles[state]
                                    }}>
                                    <div className="mdb-cp-selection">

                                        <ColorsPreview
                                            lastColor={this.state.lastColor}
                                            selectedColor={this.state.selectedColor}
                                            opacity={this.state.opacity}
                                            setLastColor={this.setLastColor}
                                        />
                                        <ColorPallette
                                            updateSelectedColor={this.updateSelectedColor}
                                            palleteRgbaColor={this.state.palleteColor}
                                            opacity={this.state.opacity}
                                            x={this.state.x}
                                            y={this.state.y}
                                            selectedColor={this.state.selectedColor}
                                            palleteWidth={this.props.palleteWidth}
                                            palleteHeight={this.props.palleteHeight}
                                        />

                                        <div className="mdb-cp-color-chooser">
                                            <HuePicker
                                                stripWidth={this.props.stripWidth}
                                                stripHeight={this.props.stripHeight}
                                                opacity={this.state.opacity}
                                                hueOffset={this.state.hueOffset}
                                                selectedColor={this.state.selectedColor}
                                                setHue={this.setHue}
                                            />
                                            <OpacityPicker
                                                setOpacity={this.setOpacity}
                                                opacity={this.state.opacity}
                                                selectedColor={this.state.selectedColor}
                                                stripWidth={this.props.stripWidth}
                                                stripHeight={this.props.stripHeight}
                                            />

                                        </div >
                                    </div>

                                    <Controllers
                                        saveColor={this.saveColor}
                                        clearColor={this.clearColor}
                                        saveLabel={this.props.saveLabel}
                                        clearLabel={this.props.clearLabel}
                                        opacity={this.props.opacity}
                                        currentColorLabel={this.state.currentColorLabel}
                                        colorSpace={this.state.colorSpace}
                                        selectedColor={this.state.selectedColor}
                                        changeColorSpace={this.changeColorSpace}
                                    />
                                </div >
                            )
                        }}
                    </Transition>
                </div>
            </ClickOutside >
        );
    }
};

ColorPickerContainer.defaultProps = {
    rgbaColor: 'rgba( 255, 0, 0, 1)',
    saveLabel: "Save",
    clearLabel: "Clear",
    stripHeight: 168,
    stripWidth: 8,
    transitionDuration: 300,
    transitionType: "ease-in-out",
    colorSpace: "rgba",
    palleteWidth: 380,
    palleteHeight: 168,
}

ColorPickerContainer.propTypes = {
    rgbaColor: PropTypes.string.isRequired,
    saveLabel: PropTypes.string.isRequired,
    clearLabel: PropTypes.string.isRequired,
    stripHeight: PropTypes.number.isRequired,
    stripWidth: PropTypes.number.isRequired,
    palleteWidth: PropTypes.number.isRequired,
    palleteHeight: PropTypes.number.isRequired,
    getValue: PropTypes.func,
    transitionType: PropTypes.string.isRequired,
    close: PropTypes.func.isRequired,
    isOpen: PropTypes.bool.isRequired,
    colorSpace: PropTypes.oneOf(['rgba', 'hex', 'hsla', 'hsva', 'cmyk'])
}


export default ColorPickerContainer;