'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactDom = require('react-dom');
var reactDom__default = _interopDefault(reactDom);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

var interopRequireDefault = createCommonjsModule(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
});

unwrapExports(interopRequireDefault);

var hasClass_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];
});

unwrapExports(hasClass_1);

var addClass_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = addClass;

var _hasClass = interopRequireDefault(hasClass_1);

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];
});

unwrapExports(addClass_1);

function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

var removeClass = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
  polyfill: polyfill
});

var PropTypes = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutsShape = null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape = null;
exports.classNamesShape = classNamesShape;
});

unwrapExports(PropTypes);
var PropTypes_1 = PropTypes.classNamesShape;
var PropTypes_2 = PropTypes.timeoutsShape;

var Transition_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes$$1 = _interopRequireWildcard(propTypes);

var _react = _interopRequireDefault(React__default);

var _reactDom = _interopRequireDefault(reactDom__default);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes$$1.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes = {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);

exports.default = _default;
});

unwrapExports(Transition_1);
var Transition_2 = Transition_1.EXITING;
var Transition_3 = Transition_1.ENTERED;
var Transition_4 = Transition_1.ENTERING;
var Transition_5 = Transition_1.EXITED;
var Transition_6 = Transition_1.UNMOUNTED;

var CSSTransition_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var PropTypes$$1 = _interopRequireWildcard(propTypes);

var _addClass = _interopRequireDefault(addClass_1);

var _removeClass = _interopRequireDefault(removeClass);

var _react = _interopRequireDefault(React__default);

var _Transition = _interopRequireDefault(Transition_1);



function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass.default)(node, c);
  });
};

var removeClass$$1 = function removeClass$$1(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass.default)(node, c);
  });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
 * using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity: 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**.
 */


var CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');

      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var appearClassName = _this.getClassNames('appear').doneClassName;

      var enterClassName = _this.getClassNames('enter').doneClassName;

      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      addClass(node, doneClassName);

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      var _this$getClassNames3 = _this.getClassNames('exit'),
          className = _this$getClassNames3.className;

      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames4.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      var _this$getClassNames5 = _this.getClassNames('exit'),
          doneClassName = _this$getClassNames5.doneClassName;

      _this.removeClasses(node, 'exit');

      addClass(node, doneClassName);

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === 'string';
      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
      var className = isStringClassNames ? prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
      return {
        className: className,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$getClassNames6 = this.getClassNames(type),
        className = _this$getClassNames6.className,
        activeClassName = _this$getClassNames6.activeClassName,
        doneClassName = _this$getClassNames6.doneClassName;

    className && removeClass$$1(node, className);
    activeClassName && removeClass$$1(node, activeClassName);
    doneClassName && removeClass$$1(node, doneClassName);
  };

  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    if (className) {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
      /* eslint-enable no-unused-expressions */

      addClass(node, className);
    }
  };

  _proto.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;
    return _react.default.createElement(_Transition.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react.default.Component);

CSSTransition.defaultProps = {
  classNames: ''
};
CSSTransition.propTypes = {};
var _default = CSSTransition;
exports.default = _default;
module.exports = exports["default"];
});

unwrapExports(CSSTransition_1);

var ChildMapping = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;



/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, React__default.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) React__default.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, React__default.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, React__default.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, React__default.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, React__default.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, React__default.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, React__default.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, React__default.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}
});

unwrapExports(ChildMapping);
var ChildMapping_1 = ChildMapping.getChildMapping;
var ChildMapping_2 = ChildMapping.mergeChildMappings;
var ChildMapping_3 = ChildMapping.getInitialChildMapping;
var ChildMapping_4 = ChildMapping.getNextChildMapping;

var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(propTypes);

var _react = _interopRequireDefault(React__default);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes = {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];
});

unwrapExports(TransitionGroup_1);

var ReplaceTransition_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(propTypes);

var _react = _interopRequireDefault(React__default);



var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */
var ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;

    var child = _react.default.Children.toArray(children)[idx];

    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler]((0, reactDom__default.findDOMNode)(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = _react.default.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : _react.default.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(_react.default.Component);

ReplaceTransition.propTypes = {};
var _default = ReplaceTransition;
exports.default = _default;
module.exports = exports["default"];
});

unwrapExports(ReplaceTransition_1);

var reactTransitionGroup = createCommonjsModule(function (module) {

var _CSSTransition = _interopRequireDefault(CSSTransition_1);

var _ReplaceTransition = _interopRequireDefault(ReplaceTransition_1);

var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

var _Transition = _interopRequireDefault(Transition_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  Transition: _Transition.default,
  TransitionGroup: _TransitionGroup.default,
  ReplaceTransition: _ReplaceTransition.default,
  CSSTransition: _CSSTransition.default
};
});

unwrapExports(reactTransitionGroup);
var reactTransitionGroup_1 = reactTransitionGroup.Transition;
var reactTransitionGroup_2 = reactTransitionGroup.TransitionGroup;
var reactTransitionGroup_3 = reactTransitionGroup.ReplaceTransition;
var reactTransitionGroup_4 = reactTransitionGroup.CSSTransition;

var colorsPreview = function colorsPreview(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "mdb-cp-color-preview"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mdb-cp-last-color",
    style: {
      background: "".concat(props.lastColor),
      width: '2em'
    },
    onClick: props.setLastColor
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "mdb-cp-current-color",
    style: {
      background: "".concat(props.selectedColor),
      width: '2em'
    }
  }));
};

colorsPreview.propTypes = {
  lastColor: propTypes.string.isRequired,
  selectedColor: propTypes.string.isRequired,
  setLastColor: propTypes.func.isRequired
};

var ColorPallete = /*#__PURE__*/function (_PureComponent) {
  _inherits(ColorPallete, _PureComponent);

  var _super = _createSuper(ColorPallete);

  function ColorPallete() {
    var _this;

    _classCallCheck(this, ColorPallete);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "canvasRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "pickerRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "canvas", null);

    _defineProperty(_assertThisInitialized(_this), "drag", false);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.drawGradient();

      document.addEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      document.removeEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function () {
      _this.drawGradient();
    });

    _defineProperty(_assertThisInitialized(_this), "drawGradient", function () {
      _this.canvas = _this.canvasRef.current.getContext("2d");
      _this.canvas.fillStyle = _this.props.palleteRgbaColor;

      _this.canvas.fillRect(0, 0, _this.props.palleteWidth, _this.props.palleteHeight);

      var grdWhite = _this.canvas.createLinearGradient(0, 0, _this.props.palleteWidth, 0);

      grdWhite.addColorStop(0, 'rgb(255,255,255)');
      grdWhite.addColorStop(1, 'transparent');
      _this.canvas.fillStyle = grdWhite;

      _this.canvas.fillRect(0, 0, _this.props.palleteWidth, _this.props.palleteHeight);

      var grdBlack = _this.canvas.createLinearGradient(0, 0, 0, _this.props.palleteHeight);

      grdBlack.addColorStop(0, 'transparent');
      grdBlack.addColorStop(1, 'rgb(0,0,0)');
      _this.canvas.fillStyle = grdBlack;

      _this.canvas.fillRect(0, 0, _this.props.palleteWidth, _this.props.palleteHeight);
    });

    _defineProperty(_assertThisInitialized(_this), "updateSelectedColor", function (e) {
      e.persist();
      var x = e.nativeEvent.offsetX;
      var y = e.nativeEvent.offsetY;

      var palleteData = _this.canvas.getImageData(x, y, 1, 1).data;

      var rgbaColor = "rgba(".concat(palleteData[0], ", ").concat(palleteData[1], ", ").concat(palleteData[2], ", ").concat(_this.props.opacity, ")");

      _this.props.updateSelectedColor(rgbaColor, x, y);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseDownHandler", function (e) {
      _this.drag = true;
      _this.canvasRef.current.style.cursor = 'none';

      _this.updateSelectedColor(e);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseMoveHandler", function (e) {
      if (_this.drag) {
        _this.updateSelectedColor(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "dragStop", function () {
      _this.drag = false;
      _this.canvasRef.current.style.cursor = 'crosshair';
    });

    return _this;
  }

  _createClass(ColorPallete, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-color-palette"
      }, /*#__PURE__*/React__default.createElement("div", {
        ref: this.pickerRef,
        className: "mdb-cp-picker",
        style: {
          left: this.props.x + 'px',
          top: this.props.y + 'px',
          background: this.props.selectedColor
        }
      }), /*#__PURE__*/React__default.createElement("canvas", {
        ref: this.canvasRef,
        height: this.props.palleteHeight,
        width: this.props.palleteWidth,
        className: "mdb-cp-palette",
        onDragStart: function onDragStart() {
          return false;
        },
        onDrag: function onDrag() {
          return false;
        },
        onMouseDown: this.onMouseDownHandler,
        onTouchStart: this.onMouseDownHandler,
        onMouseMove: this.onMouseMoveHandler,
        onTouchMove: this.onMouseMoveHandler,
        onMouseUp: this.onMouseUpHandler,
        onTouchEnd: this.onMouseUpHandler
      }));
    }
  }]);

  return ColorPallete;
}(React.PureComponent);
ColorPallete.defaultProps = {
  palleteRgbaColor: 'rgba( 255, 0, 0, 1)'
};
ColorPallete.propTypes = {
  palleteRgbaColor: propTypes.string.isRequired,
  palleteWidth: propTypes.number.isRequired,
  palleteHeight: propTypes.number.isRequired,
  opacity: propTypes.number.isRequired,
  selectedColor: propTypes.string.isRequired,
  updateSelectedColor: propTypes.func.isRequired,
  x: propTypes.number.isRequired,
  y: propTypes.number.isRequired
};

var OpacityPicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(OpacityPicker, _PureComponent);

  var _super = _createSuper(OpacityPicker);

  function OpacityPicker() {
    var _this;

    _classCallCheck(this, OpacityPicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "canvasRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "canvas", null);

    _defineProperty(_assertThisInitialized(_this), "drag", false);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.drawGradient();

      document.addEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      document.removeEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function () {
      _this.drawGradient();
    });

    _defineProperty(_assertThisInitialized(_this), "drawGradient", function () {
      _this.canvas = _this.canvasRef.current.getContext("2d");

      var colorGradient = _this.canvas.createLinearGradient(0, _this.props.stripHeight, 0, 0);

      colorGradient.addColorStop(0, _this.props.selectedColor);
      colorGradient.addColorStop(1, 'rgb(255,255,255)');
      _this.canvas.fillStyle = colorGradient;

      _this.canvas.fillRect(0, 0, _this.props.stripWidth, _this.props.stripHeight);
    });

    _defineProperty(_assertThisInitialized(_this), "setOpacity", function (e) {
      e.persist();
      var offsetY = e.nativeEvent.offsetY;
      var opacity = parseFloat((offsetY / _this.props.stripHeight).toFixed(2));

      _this.props.setOpacity(opacity);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseDownHandler", function (e) {
      _this.drag = true;

      _this.setOpacity(e);
    });

    _defineProperty(_assertThisInitialized(_this), "dragStop", function () {
      _this.drag = false;
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseMoveHandler", function (e) {
      if (_this.drag) {
        _this.setOpacity(e);
      }
    });

    return _this;
  }

  _createClass(OpacityPicker, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-strip-wrapper"
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-opacity-picker",
        style: {
          top: this.props.opacity * this.props.stripHeight + 'px',
          left: this.props.stripWidth / 2 - 4 + 'px',
          backgroundColor: this.props.selectedColor,
          pointerEvents: 'none'
        }
      }), /*#__PURE__*/React__default.createElement("canvas", {
        className: "mdb-cp-strip mdb-cp-opacity-slider",
        height: this.props.stripHeight,
        width: this.props.stripWidth,
        ref: this.canvasRef,
        onDragStart: function onDragStart() {
          return false;
        },
        onDrag: function onDrag() {
          return false;
        },
        onMouseDown: this.onMouseDownHandler,
        onTouchStart: this.onMouseDownHandler,
        onMouseMove: this.onMouseMoveHandler,
        onTouchMove: this.onMouseMoveHandler,
        onMouseUp: this.onMouseUpHandler,
        onTouchEnd: this.onMouseUpHandler
      }));
    }
  }]);

  return OpacityPicker;
}(React.PureComponent);

OpacityPicker.propTypes = {
  stripHeight: propTypes.number.isRequired,
  stripWidth: propTypes.number.isRequired,
  selectedColor: propTypes.string.isRequired,
  setOpacity: propTypes.func.isRequired
};

var HuePicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(HuePicker, _PureComponent);

  var _super = _createSuper(HuePicker);

  function HuePicker() {
    var _this;

    _classCallCheck(this, HuePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "canvasRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "canvas", null);

    _defineProperty(_assertThisInitialized(_this), "drag", void 0);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.drawGradient();

      document.addEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      document.removeEventListener('mouseup', _this.dragStop);
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function () {
      _this.drawGradient();
    });

    _defineProperty(_assertThisInitialized(_this), "drawGradient", function () {
      _this.canvas = _this.canvasRef.current.getContext("2d");

      _this.canvas.rect(0, 0, _this.props.stripWidth, _this.props.stripHeight);

      var gradient = _this.canvas.createLinearGradient(0, 0, 0, 168);

      gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');
      gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');
      gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');
      gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');
      gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');
      gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');
      gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');
      _this.canvas.fillStyle = gradient;

      _this.canvas.fill();
    });

    _defineProperty(_assertThisInitialized(_this), "dragStop", function () {
      _this.drag = false;
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseDownHandler", function (e) {
      _this.drag = true;

      _this.setHoue(e);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseMoveHandler", function (e) {
      if (_this.drag) {
        _this.setHoue(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setHoue", function (e) {
      e.persist();
      var offsetY = e.nativeEvent.offsetY;
      var offsetX = _this.props.stripWidth / 2;

      var hueOffset = (offsetY / _this.props.stripHeight).toFixed(2);

      var palleteData = _this.canvas.getImageData(offsetX, offsetY, 1, 1).data;

      var rgbaColor = "rgba(".concat(palleteData[0], ", ").concat(palleteData[1], ", ").concat(palleteData[2], ", ").concat(_this.props.opacity, ")");

      _this.props.setHue(rgbaColor, hueOffset);
    });

    return _this;
  }

  _createClass(HuePicker, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-strip-wrapper"
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-strip-picker",
        style: {
          top: this.props.hueOffset * this.props.stripHeight + 'px',
          left: this.props.stripWidth / 2 - 4 + 'px',
          backgroundColor: this.props.selectedColor,
          pointerEvents: 'none'
        }
      }), /*#__PURE__*/React__default.createElement("canvas", {
        className: "mdb-cp-strip",
        height: this.props.stripHeight,
        width: this.props.stripWidth,
        onDragStart: function onDragStart() {
          return false;
        },
        onDrag: function onDrag() {
          return false;
        },
        onMouseDown: this.onMouseDownHandler,
        onTouchStart: this.onMouseDownHandler,
        onMouseMove: this.onMouseMoveHandler,
        onTouchMove: this.onMouseMoveHandler,
        onMouseUp: this.onMouseUpHandler,
        onTouchEnd: this.onMouseUpHandler,
        ref: this.canvasRef
      }));
    }
  }]);

  return HuePicker;
}(React.PureComponent);

HuePicker.propTypes = {
  stripHeight: propTypes.number.isRequired,
  stripWidth: propTypes.number.isRequired,
  selectedColor: propTypes.string.isRequired,
  opacity: propTypes.number.isRequired,
  setHue: propTypes.func.isRequired
};

var rgb2Hex = function rgb2Hex(r, g, b, a) {
  var computedR = r.toString(16);
  var computedG = g.toString(16);
  var computedB = b.toString(16);
  var computedA = Math.round(+a * 255).toString(16);
  if (computedR.length === 1) computedR = "0" + computedR;
  if (computedG.length === 1) computedG = "0" + computedG;
  if (computedB.length === 1) computedB = "0" + computedB;
  if (computedA.length === 1) computedA = "0" + computedA;
  return "#" + computedR + computedG + computedB;
};

var cmyk2rgba = function cmyk2rgba(cmykColor) {
  if (!/^cmyk\(\s?(\d{1,3}%?,\s?){4}\)$/.test(cmykColor)) {
    return cmykColor;
  }

  var cmykArray = cmykColor.replace(/cmyk\(|\)|%/gm, "").split(',');
  cmykArray = cmykArray.map(function (el) {
    return parseInt(el / 100, 10);
  });
  var a = -cmykArray[0];
  var r = 255 * (1 - cmykArray[1]) * (1 - cmykArray[4]);
  var g = 255 * (1 - cmykArray[2]) * (1 - cmykArray[4]);
  var b = 255 * (1 - cmykArray[3]) * (1 - cmykArray[4]);

  if (validateRGBA(r, g, b, a)) {
    return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(r, ", ").concat(a, ")");
  }

  return cmykColor;
};

var rgb2cmyk = function rgb2cmyk(r, g, b) {
  var computedC = 0;
  var computedM = 0;
  var computedY = 0;
  var computedK = 0; //remove spaces from input RGB values, convert to int

  r = parseInt(('' + r).replace(/\s/g, ''), 10);
  g = parseInt(('' + g).replace(/\s/g, ''), 10);
  b = parseInt(('' + b).replace(/\s/g, ''), 10); // BLACK

  if (r === 0 && g === 0 && b === 0) {
    computedK = 1;
    return [0, 0, 0, 1];
  }

  computedC = 1 - r / 255;
  computedM = 1 - g / 255;
  computedY = 1 - b / 255;
  var minCMY = Math.min(computedC, Math.min(computedM, computedY));
  computedC = Math.round((computedC - minCMY) / (1 - minCMY) * 100);
  computedM = Math.round((computedM - minCMY) / (1 - minCMY) * 100);
  computedY = Math.round((computedY - minCMY) / (1 - minCMY) * 100);
  computedK = Math.round(minCMY * 100);
  return "cmyk( " + computedC + "%, " + computedM + "%, " + computedY + "%, " + computedK + "%)";
};

var rgb2Hsv = function rgb2Hsv(r, g, b, a) {
  var computedR = r / 255;
  var computedG = g / 255;
  var computedB = b / 255;
  var max = Math.max(computedR, computedG, computedB);
  var min = Math.min(computedR, computedG, computedB);
  var delta = max - min;
  var h = 0;
  var s = max === 0 ? 0 : Math.round(delta * 100 / max);
  var v = Math.round(max * 100);

  if (max === min) {
    h = 0; // achromatic
  } else {
    switch (max) {
      case computedR:
        h = Math.round((g < b ? 6 : 0) + (g - b) / delta);
        break;

      case computedG:
        h = Math.round(2 + (b - r) / delta);
        break;

      case computedB:
        h = Math.round(4 + (r - g) / delta);
        break;

      default:
        break;
    }

    h = h * 60;
  }

  return "hsva( " + h + ", " + s + "%, " + v + "%, " + a + ")";
};

var rgb2Hsl = function rgb2Hsl(r, g, b, a) {
  var computedR = r / 255;
  var computedG = g / 255;
  var computedB = b / 255;
  var max = Math.max(computedR, computedG, computedB);
  var min = Math.min(computedR, computedG, computedB);
  var delta = max - min;
  var h = 0;
  var s = 0;
  var l = 0;
  if (delta === 0) h = 0;else if (max === computedR) h = (computedG - computedB) / delta % 6;else if (max === computedG) h = (computedB - computedR) / delta + 2;else h = (computedR - computedG) / delta + 4;
  h = Math.round(h * 60);
  if (h < 0) h += 360;
  l = (max + min) / 2;
  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
  s = +(s * 100).toFixed();
  l = +(l * 100).toFixed();
  return "hsla( " + h + ", " + s + "%, " + l + "%, " + a + ")";
};

var hex2rgba = function hex2rgba(hexColor) {
  var c;

  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hexColor)) {
    c = hexColor.substring(1).split('');

    if (c.length === 3) {
      c = [c[0], c[0], c[1], c[1], c[2], c[2]];
    }

    c = '0x' + c.join('');
    return 'rgba( ' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(', ') + ', 1)';
  }

  return hexColor;
};

var hsla2rgba = function hsla2rgba(hslaColor) {
  if (!/^hsla\(\s?(\d{1,3}%?,\s?){3}(1|0)\.?(\d+)?\)$/.test(hslaColor)) {
    return hslaColor;
  }

  var hslaArray = hslaColor.replace(/hsla\(|\)|%/gm, "").split(',');
  hslaArray = hslaArray.map(function (el) {
    return parseInt(el, 10);
  });
  var r;
  var g;
  var b;
  var h = hslaArray[0];
  var s = hslaArray[1];
  var l = hslaArray[2];
  var a = hslaArray[3];
  var m, c, x;
  if (!isFinite(h)) h = 0;
  if (!isFinite(s)) s = 0;
  if (!isFinite(l)) l = 0;
  h /= 60;
  if (h < 0) h = 6 - -h % 6;
  h %= 6;
  s = Math.max(0, Math.min(1, s / 100));
  l = Math.max(0, Math.min(1, l / 100));
  c = (1 - Math.abs(2 * l - 1)) * s;
  x = c * (1 - Math.abs(h % 2 - 1));

  if (h < 1) {
    r = c;
    g = x;
    b = 0;
  } else if (h < 2) {
    r = x;
    g = c;
    b = 0;
  } else if (h < 3) {
    r = 0;
    g = c;
    b = x;
  } else if (h < 4) {
    r = 0;
    g = x;
    b = c;
  } else if (h < 5) {
    r = x;
    g = 0;
    b = c;
  } else {
    r = c;
    g = 0;
    b = x;
  }

  m = l - c / 2;
  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  if (validateRGBA(r, g, b, a)) {
    return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
  }

  return hslaColor;
};

var validateRGBA = function validateRGBA(r, g, b, a) {
  console.log(r, g, b, a);

  if (r === null || g === null || b === null || a === null || isNaN(r) || isNaN(g) || isNaN(b) || isNaN(a)) {
    return false;
  }

  if (r < 0 || g < 0 || b < 0 || r > 255 || g > 255 || b > 255) {
    return false;
  }

  return true;
};

var hsva2rgba = function hsva2rgba(hsvaColor) {
  var hslaArray = hsvaColor.replace(/hsva\(|\)|%/gm, "").split(',');
  hslaArray = hslaArray.map(function (el) {
    return parseInt(el / 100, 10);
  });
  var r;
  var g;
  var b;
  var h = hslaArray[0];
  var s = hslaArray[1];
  var v = hslaArray[2];
  var a = hslaArray[3];
  var i = Math.floor(h * 6);
  var f = h * 6 - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);

  switch (i % 6) {
    case 0:
      r = v;
      g = t;
      b = p;
      break;

    case 1:
      r = q;
      g = v;
      b = p;
      break;

    case 2:
      r = p;
      g = v;
      b = t;
      break;

    case 3:
      r = p;
      g = q;
      b = v;
      break;

    case 4:
      r = t;
      g = p;
      b = v;
      break;

    case 5:
      r = v;
      g = p;
      b = q;
      break;

    default:
      break;
  }

  if (validateRGBA(r, g, b, a)) {
    return "rgba(".concat(r * 255, ", ").concat(g * 255, ", ").concat(b * 255, ", ").concat(a, ")");
  }

  return hsvaColor;
};

var calculateColorSystem = function calculateColorSystem(color) {
  if (color.startsWith('rgba')) return 'rgba';
  if (color.startsWith('cmyk')) return 'cmyk';
  if (color.startsWith('hsla')) return 'hsla';
  if (color.startsWith('#')) return 'hex';
  if (color.startsWith('hsva')) return 'hsva';
};

var convert2rgba = function convert2rgba(color) {
  var rgbaColor;
  var colorSystem = calculateColorSystem(color);
  calculateColorSystem(color);

  switch (colorSystem) {
    case "rgba":
      rgbaColor = color;
      break;

    case "cmyk":
      rgbaColor = cmyk2rgba(color);
      break;

    case "hex":
      rgbaColor = hex2rgba(color);
      break;

    case "hsla":
      rgbaColor = hsla2rgba(color);
      break;

    case "hsva":
      rgbaColor = hsva2rgba(color);
      break;

    default:
      break;
  }

  console.log(rgbaColor);
  return rgbaColor;
};

var getAllColorSystemValues = function getAllColorSystemValues(rgbaColor) {
  var rgbaArray = rgbaColor.replace('rgba(', '').replace(')', '').split(',');
  rgbaArray = rgbaArray.map(function (el) {
    return parseInt(el, 10);
  });
  var hex = rgb2Hex(rgbaArray[0], rgbaArray[1], rgbaArray[2], rgbaArray[3]);
  var cmyk = rgb2cmyk(rgbaArray[0], rgbaArray[1], rgbaArray[2], rgbaArray[3]);
  var hsla = rgb2Hsl(rgbaArray[0], rgbaArray[1], rgbaArray[2], rgbaArray[3]);
  var hsva = rgb2Hsv(rgbaArray[0], rgbaArray[1], rgbaArray[2], rgbaArray[3]);
  return {
    hex: hex,
    cmyk: cmyk,
    hsla: hsla,
    hsva: hsva,
    rgba: rgbaColor
  };
};

var readColorOpacity = function readColorOpacity(rgbaColor) {
  var rgbaArray = rgbaColor.replace('rgba(', '').replace(')', '').split(',');
  var opacity = parseFloat(rgbaArray[3]) || 1;

  if (opacity > 1) {
    return opacity = 1;
  }

  if (opacity < 0) {
    return opacity = 0;
  }

  return opacity;
};

var Controllers = /*#__PURE__*/function (_PureComponent) {
  _inherits(Controllers, _PureComponent);

  var _super = _createSuper(Controllers);

  function Controllers() {
    var _this;

    _classCallCheck(this, Controllers);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onInputHandler", function (e) {
      var inputValue = e.target.value;
      var rgbaColor = convert2rgba(inputValue);

      _this.props.saveColor(rgbaColor, inputValue);
    });

    _defineProperty(_assertThisInitialized(_this), "copyToClipBoard", function () {
      var el = document.createElement('textarea');
      el.value = _this.props.currentColorLabel;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
    });

    _defineProperty(_assertThisInitialized(_this), "save", function () {
      _this.props.saveColor();

      _this.copyToClipBoard();
    });

    _defineProperty(_assertThisInitialized(_this), "clear", function () {
      _this.props.clearColor();
    });

    return _this;
  }

  _createClass(Controllers, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default.createElement("div", {
        className: "mdb-cp-interaction"
      }, /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-result mb-1",
        type: "text",
        spellCheck: "false",
        value: this.props.currentColorLabel,
        onChange: this.onInputHandler
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-type mb-1",
        "data-active": this.props.colorSpace === "hex",
        value: "HEX",
        type: "button",
        onClick: this.props.changeColorSpace('hex')
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-type mb-1",
        "data-active": this.props.colorSpace === "rgba",
        value: "RGBa",
        type: "button",
        onClick: this.props.changeColorSpace('rgba')
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-type mb-1",
        "data-active": this.props.colorSpace === "hsla",
        value: "HSLa",
        type: "button",
        onClick: this.props.changeColorSpace('hsla')
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-type mb-1",
        "data-active": this.props.colorSpace === "hsva",
        value: "HSVa",
        type: "button",
        onClick: this.props.changeColorSpace('hsva')
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-type mb-1",
        "data-active": this.props.colorSpace === "cmyk",
        value: "CMYK",
        type: "button",
        onClick: this.props.changeColorSpace('cmyk')
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-save mb-1",
        value: this.props.saveLabel,
        onClick: this.save,
        type: "button"
      }), /*#__PURE__*/React__default.createElement("input", {
        className: "mdb-cp-clear mb-1",
        value: this.props.clearLabel,
        type: "button",
        onClick: this.clear
      }));
    }
  }]);

  return Controllers;
}(React.PureComponent);

Controllers.propTypes = {
  currentColorLabel: propTypes.string.isRequired,
  saveColor: propTypes.func.isRequired,
  clearColor: propTypes.func.isRequired,
  changeColorSpace: propTypes.func.isRequired,
  saveLabel: propTypes.string.isRequired,
  clearLabel: propTypes.string.isRequired,
  colorSpace: propTypes.string.isRequired
};

var ClickOutsideListener = /*#__PURE__*/function (_PureComponent) {
  _inherits(ClickOutsideListener, _PureComponent);

  var _super = _createSuper(ClickOutsideListener);

  function ClickOutsideListener() {
    var _this;

    _classCallCheck(this, ClickOutsideListener);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function (e) {
      if (_this.ref && _this.ref.contains) {
        var clickedOutside = !_this.ref.contains(e.target);

        if (clickedOutside) {
          _this.props.close();
        }
      }
    });

    return _this;
  }

  _createClass(ClickOutsideListener, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.ref = reactDom.findDOMNode(this);
      document.addEventListener('click', this.handleClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleClickOutside);
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return ClickOutsideListener;
}(React.PureComponent);

ClickOutsideListener.propTypes = {
  close: propTypes.func.isRequired
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".mdb-cp {\r\n  position: relative;\r\n}\r\n\r\n.mdb-cp-app:focus {\r\n  outline: none;\r\n}\r\n\r\n.mdb-cp .mdb-cp-btn-wrapper {\r\n  position: relative;\r\n  height: 2em;\r\n  width: 2em;\r\n  border-radius: 0.15em;\r\n  background: url('../assets/background.svg');\r\n  background-size: 0.5em;\r\n}\r\n\r\n.mdb-cp .mdb-cp-btn {\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius: 0.15em;\r\n  cursor: pointer;\r\n  background: transparent;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.mdb-cp-app {\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  z-index: 10000;\r\n  box-shadow: 0 0.2em 1.5em 0 rgba(0, 0, 0, 0.1), 0 0 1em 0 rgba(0, 0, 0, 0.02);\r\n  top: 120%;\r\n  margin-left: 50%;\r\n  left: -17em;\r\n  height: 15em;\r\n  width: 34em;\r\n  max-width: 95vw;\r\n  padding: 0.8em;\r\n  border-radius: 0.1em;\r\n  background: #fff;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-grow: 1;\r\n  height: 80%;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-interaction {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1em -0.2em 0;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-preview {\r\n  position: relative;\r\n  z-index: 1;\r\n  width: 2em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-preview:before {\r\n  position: absolute;\r\n  content: '';\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('../assets/background.svg');\r\n  background-size: 0.5em;\r\n  border-radius: 0.15em;\r\n  z-index: -1;\r\n}\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-preview .mdb-cp-last-color {\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  border-radius: 0.15em 0.15em 0 0;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-preview .mdb-cp-current-color,\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-preview .mdb-cp-last-color {\r\n  background: transparent;\r\n  width: 100%;\r\n  height: 50%;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-palette {\r\n  z-index: 1;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-palette .mdb-cp-palette {\r\n  height: 100%;\r\n  width: 379px;\r\n  border-radius: 0.15em;\r\n  cursor: crosshair;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-palette:before {\r\n  position: absolute;\r\n  content: '';\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('../assets/background.svg');\r\n  background-size: 0.5em;\r\n  border-radius: 0.15em;\r\n  z-index: -1;\r\n}\r\n.mdb-cp-app .mdb-cp-interaction > * {\r\n  margin: 0 0.2em;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-chooser,\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-opacity,\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-palette {\r\n  position: relative;\r\n  user-select: none;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-picker {\r\n  position: absolute;\r\n  height: 18px;\r\n  width: 18px;\r\n  margin-left: -9px;\r\n  margin-top: -9px;\r\n  border: 2px solid #fff;\r\n  border-radius: 100%;\r\n  user-select: none;\r\n  z-index: 2;\r\n}\r\n\r\n.mdb-cp-strip-wrapper {\r\n  position: relative;\r\n  float: left;\r\n}\r\n\r\n.mdb-cp-strip-wrapper:last-child {\r\n  margin-left: 15px;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-strip-picker,\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-opacity-picker {\r\n  position: absolute;\r\n  height: 18px;\r\n  width: 18px;\r\n  margin-left: -5px;\r\n  margin-top: -9px;\r\n  border: 2px solid #fff;\r\n  border-radius: 100%;\r\n  user-select: none;\r\n  z-index: 2;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-chooser .mdb-cp-slider,\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-color-opacity .mdb-cp-slider {\r\n  width: 8px;\r\n  height: 100%;\r\n  border-radius: 50em;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-interaction input {\r\n  padding: 0.5em 0.6em;\r\n  border: none;\r\n  outline: none;\r\n  letter-spacing: 0.07em;\r\n  font-size: 0.75em;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  color: #c4c4c4;\r\n  background: #f8f8f8;\r\n  border-radius: 0.15em;\r\n  transition: all 0.15s;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-result {\r\n  color: grey;\r\n  text-align: left;\r\n  flex-grow: 1;\r\n  min-width: 1em;\r\n  transition: all 0.2s;\r\n  border-radius: 0.15em;\r\n  background: #f8f8f8;\r\n  cursor: text;\r\n  padding-left: 0.8em;\r\n}\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-clear,\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-save {\r\n  color: #fff;\r\n  width: auto;\r\n}\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-save {\r\n  background: #4285f4;\r\n}\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-clear {\r\n  background: #f44250;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-interaction .mdb-cp-type[data-active=\"true\"] {\r\n  color: #fff;\r\n  background: #4285f4;\r\n}\r\n\r\n.mdb-cp-strip {\r\n  border-radius: 5px;\r\n  cursor: crosshair;\r\n}\r\n\r\n.mdb-cp-opacity-picker {\r\n  background: black;\r\n}\r\n\r\n.mdb-cp-app .mdb-cp-selection .mdb-cp-opacity-slider {\r\n  background: linear-gradient(180deg, transparent, #000),\r\n    url('../assets/background.svg');\r\n  background-size: 100%, 50%;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .mdb-cp-app {\r\n    width: 95vw;\r\n    height: auto;\r\n    left: -10em;\r\n  }\r\n\r\n  .mdb-cp-app .mdb-cp-selection .mdb-cp-color-palette .mdb-cp-palette {\r\n    width: 200px;\r\n  }\r\n\r\n  .mdb-cp-app .mdb-cp-interaction {\r\n    display: block;\r\n    margin: 1em -0.2em 0;\r\n  }\r\n}\r\n\r\n\r\n";
styleInject(css);

var ColorPickerContainer = /*#__PURE__*/function (_Component) {
  _inherits(ColorPickerContainer, _Component);

  var _super = _createSuper(ColorPickerContainer);

  function ColorPickerContainer() {
    var _this;

    _classCallCheck(this, ColorPickerContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      lastColor: _this.props.rgbaColor,
      palleteColor: _this.props.rgbaColor,
      selectedColor: _this.props.rgbaColor,
      currentColorLabel: getAllColorSystemValues(_this.props.rgbaColor)[_this.props.colorSpace],
      colorSpace: _this.props.colorSpace,
      opacity: readColorOpacity(_this.props.rgbaColor),
      hueOffset: 0,
      x: 0,
      y: 0,
      isOpen: true,
      colorValue: getAllColorSystemValues(_this.props.rgbaColor)
    });

    _defineProperty(_assertThisInitialized(_this), "saveColor", function () {
      var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.selectedColor;
      var currentColorLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.currentColorLabel;
      var regex = /rgba?\(((25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,\s*?){2}(25[0-5]|2[0-4]\d|1\d{1,2}|\d\d?)\s*,?\s*([01]\.?\d*?)?\)/;
      var regexInstance = new RegExp(regex);

      if (regexInstance.test(rgba)) {
        var colorValue = getAllColorSystemValues(rgba);
        _this.props.getValue && _this.props.getValue(colorValue);

        _this.setState({
          selectedColor: rgba,
          lastColor: rgba,
          palleteColor: rgba,
          currentColorLabel: currentColorLabel,
          colorValue: colorValue
        });
      }

      _this.setState({
        currentColorLabel: currentColorLabel
      });
    });

    _defineProperty(_assertThisInitialized(_this), "clearColor", function () {
      var colorValue = getAllColorSystemValues(_this.state.lastColor);
      var currentColorLabel = colorValue[_this.state.colorSpace];

      _this.setState({
        selectedColor: _this.state.lastColor,
        currentColorLabel: currentColorLabel,
        colorValue: colorValue
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateSelectedColor", function (rgbaColor, x, y) {
      var colorValue = getAllColorSystemValues(rgbaColor);
      var currentColorLabel = colorValue[_this.state.colorSpace];

      _this.setState({
        selectedColor: rgbaColor,
        colorValue: colorValue,
        currentColorLabel: currentColorLabel,
        x: x,
        y: y
      });
    });

    _defineProperty(_assertThisInitialized(_this), "changeColorSpace", function (colorSpace) {
      return function () {
        var colorValue = _this.state.colorValue;
        var currentColorLabel = colorValue[colorSpace];

        _this.setState({
          colorSpace: colorSpace,
          currentColorLabel: currentColorLabel
        });
      };
    });

    _defineProperty(_assertThisInitialized(_this), "setOpacity", function (opacity) {
      var splitRGBAcolorArray = _this.state.selectedColor.split(",");

      splitRGBAcolorArray[3] = " ".concat(opacity, ")");
      var rgbaColor = splitRGBAcolorArray.join(',');
      var colorValue = getAllColorSystemValues(rgbaColor);
      var currentColorLabel = colorValue[_this.state.colorSpace];

      _this.setState({
        selectedColor: rgbaColor,
        currentColorLabel: currentColorLabel,
        opacity: opacity,
        colorValue: colorValue
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setHue", function (rgbaColor, hueOffset) {
      var colorValue = getAllColorSystemValues(rgbaColor);
      var currentColorLabel = colorValue[_this.state.colorSpace];

      _this.setState({
        selectedColor: rgbaColor,
        palleteColor: rgbaColor,
        currentColorLabel: currentColorLabel,
        hueOffset: hueOffset,
        colorValue: colorValue
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setLastColor", function () {
      var colorValue = getAllColorSystemValues(_this.state.lastColor);
      var currentColorLabel = colorValue[_this.state.colorSpace];

      _this.setState({
        palleteColor: _this.state.lastColor,
        selectedColor: _this.state.lastColor,
        currentColorLabel: currentColorLabel,
        colorValue: colorValue
      });
    });

    return _this;
  }

  _createClass(ColorPickerContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var defaultStyle = {
        transition: "all ".concat(this.props.transitionDuration, "ms ").concat(this.props.transitionType),
        opacity: 0
      };
      var transitionStyles = {
        entering: {
          opacity: 0
        },
        entered: {
          opacity: 1
        },
        exited: {
          opacity: 0,
          display: "none"
        }
      };
      return /*#__PURE__*/React__default.createElement(ClickOutsideListener, {
        close: this.props.close,
        isOpen: this.props.isOpen
      }, /*#__PURE__*/React__default.createElement("div", null, this.props.children, /*#__PURE__*/React__default.createElement(reactTransitionGroup_1, {
        "in": this.props.isOpen,
        timeout: this.props.transitionDuration
      }, function (state) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: "mdb-cp-app",
          style: _objectSpread2({}, defaultStyle, {}, transitionStyles[state])
        }, /*#__PURE__*/React__default.createElement("div", {
          className: "mdb-cp-selection"
        }, /*#__PURE__*/React__default.createElement(colorsPreview, {
          lastColor: _this2.state.lastColor,
          selectedColor: _this2.state.selectedColor,
          opacity: _this2.state.opacity,
          setLastColor: _this2.setLastColor
        }), /*#__PURE__*/React__default.createElement(ColorPallete, {
          updateSelectedColor: _this2.updateSelectedColor,
          palleteRgbaColor: _this2.state.palleteColor,
          opacity: _this2.state.opacity,
          x: _this2.state.x,
          y: _this2.state.y,
          selectedColor: _this2.state.selectedColor,
          palleteWidth: _this2.props.palleteWidth,
          palleteHeight: _this2.props.palleteHeight
        }), /*#__PURE__*/React__default.createElement("div", {
          className: "mdb-cp-color-chooser"
        }, /*#__PURE__*/React__default.createElement(HuePicker, {
          stripWidth: _this2.props.stripWidth,
          stripHeight: _this2.props.stripHeight,
          opacity: _this2.state.opacity,
          hueOffset: _this2.state.hueOffset,
          selectedColor: _this2.state.selectedColor,
          setHue: _this2.setHue
        }), /*#__PURE__*/React__default.createElement(OpacityPicker, {
          setOpacity: _this2.setOpacity,
          opacity: _this2.state.opacity,
          selectedColor: _this2.state.selectedColor,
          stripWidth: _this2.props.stripWidth,
          stripHeight: _this2.props.stripHeight
        }))), /*#__PURE__*/React__default.createElement(Controllers, {
          saveColor: _this2.saveColor,
          clearColor: _this2.clearColor,
          saveLabel: _this2.props.saveLabel,
          clearLabel: _this2.props.clearLabel,
          opacity: _this2.props.opacity,
          currentColorLabel: _this2.state.currentColorLabel,
          colorSpace: _this2.state.colorSpace,
          selectedColor: _this2.state.selectedColor,
          changeColorSpace: _this2.changeColorSpace
        }));
      })));
    }
  }]);

  return ColorPickerContainer;
}(React.Component);
ColorPickerContainer.defaultProps = {
  rgbaColor: 'rgba( 255, 0, 0, 1)',
  saveLabel: "Save",
  clearLabel: "Clear",
  stripHeight: 168,
  stripWidth: 8,
  transitionDuration: 300,
  transitionType: "ease-in-out",
  colorSpace: "rgba",
  palleteWidth: 380,
  palleteHeight: 168
};
ColorPickerContainer.propTypes = {
  rgbaColor: propTypes.string.isRequired,
  saveLabel: propTypes.string.isRequired,
  clearLabel: propTypes.string.isRequired,
  stripHeight: propTypes.number.isRequired,
  stripWidth: propTypes.number.isRequired,
  palleteWidth: propTypes.number.isRequired,
  palleteHeight: propTypes.number.isRequired,
  getValue: propTypes.func,
  transitionType: propTypes.string.isRequired,
  close: propTypes.func.isRequired,
  isOpen: propTypes.bool.isRequired,
  colorSpace: propTypes.oneOf(['rgba', 'hex', 'hsla', 'hsva', 'cmyk'])
};

module.exports = ColorPickerContainer;
