import React, { Component } from "react";
import { SortableContainer } from "react-sortable-hoc";
import arrayMove from "array-move";
import SortableItem from "./SortableItem";
import PropTypes from "prop-types";

const List = SortableContainer(
  ({ items, listClassName, itemClassName, disabledClassName }) => {
    return (
      <ul className={listClassName ? listClassName : null}>
        {items.map((item, index) => {
          return (
            <SortableItem
              key={item.props && item.props.id ? item.props.id : index}
              collection={
                item.props && item.props.collection ? item.props.collection : 0
              }
              disabled={
                item.props && item.props.disabled ? item.props.disabled : false
              }
              index={index}
              value={item}
              itemClassName={itemClassName ? itemClassName : null}
              disabledClassName={disabledClassName ? disabledClassName : null}
            />
          );
        })}
      </ul>
    );
  }
);

export default class Sortable extends Component {
  state = {
    items: []
  };

  updateEverything = propsItem => {
    if (this.props.multipleItems) {
      const items = [];

      propsItem.forEach(collection => items.push(...collection));

      this.setState({ items });
    } else {
      const items = propsItem;
      this.setState({ items });
    }
  };

  componentDidMount() {
    this.updateEverything(this.props.items);
  }

  componentDidUpdate(prevState, prevProps) {
    const { items } = this.props;

    if (items !== prevState.items) {
      this.updateEverything(items);
    }
  }

  onSortEnd = ({ oldIndex, newIndex }) => {
    this.setState(({ items }) => ({
      items: arrayMove(items, oldIndex, newIndex)
    }));
  };

  render() {
    const { items, ...attributes } = this.props;

    return (
      <List
        items={this.state.items}
        onSortEnd={this.props.onSortEnd ? this.props.onSortEnd : this.onSortEnd}
        {...attributes}
      />
    );
  }
}

Sortable.propTypes = {
  axis: PropTypes.string,
  disableAutoscroll: PropTypes.bool,
  disabledClassName: PropTypes.string,
  distance: PropTypes.number,
  helperClass: PropTypes.string,
  helperContainer: PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.instanceOf(Element)
  ]),
  hideSortableGhost: PropTypes.bool,
  items: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  lockAxis: PropTypes.string,
  lockOffset: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.arrayOf(PropTypes.string)
  ]),
  lockToContainerEdges: PropTypes.bool,
  pressDelay: PropTypes.number,
  shouldCancelStart: PropTypes.func,
  onSortEnd: PropTypes.func,
  onSortMove: PropTypes.func,
  onSortOver: PropTypes.func,
  onSortStart: PropTypes.func,
  transitionDuration: PropTypes.number,
  useWindowAsScrollContainer: PropTypes.bool
};

Sortable.defaultProps = {
  axis: "y",
  disableAutoscroll: false,
  distance: 0,
  hideSortableGhost: true,
  lockToContainerEdges: false,
  lockOffset: "0%",
  pressDelay: 0,
  transitionDuration: 400,
  useWindowAsScrollContainer: false
};
