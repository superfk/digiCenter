import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TransitionGroup, Transition } from 'react-transition-group';
import ReactResizeDetector from 'react-resize-detector';
import Lightbox from "react-image-lightbox";
import uuid from "uuid";
import Controlers from '../components/controlers'
import '../styles/index.scss';

class filterContainer extends Component {
    state = {
        filterBy: 'all',
        width: this.onResize,
        isOpen: false,
        photoIndex: 0,
        id: uuid(),
        imgSrcArray: []
    }

    calculateLayout = () => {
        const { columnWidth, gutterHeight, gutterWidth, responsive, itemHeight, lightbox } = this.props;
        const { filterBy, width } = this.state;
        const childrenNodesArray = React.Children.toArray(this.props.children);
        const imgSrcArray = [];
        const columns = responsive ? Math.min(Math.floor(width / (columnWidth + gutterWidth)), this.props.columns) : this.props.columns
        let filteredChildQty = 0;

        if (!this.validateChildrenNodes(childrenNodesArray)) return;

        const childrenDataArray = childrenNodesArray.map(childrenNode => {

            if (filterBy === 'all' || childrenNode.props["data-filter"] === filterBy) {

                const column = filteredChildQty % columns;
                const row = Math.floor(filteredChildQty / columns);

                const x = column * columnWidth + column * gutterWidth;
                const y = row * itemHeight + row * gutterHeight;

                filteredChildQty++;

                lightbox && imgSrcArray.push(childrenNode.props.src);

                return {
                    x,
                    y,
                    children: childrenNode
                }

            }
        });

        const gridHeight =
            Math.ceil(filteredChildQty / columns) * (itemHeight + gutterHeight) -
            gutterHeight || 0;


        return (this.renderTheLayout({ childrenDataArray, gridHeight, imgSrcArray }));
    }

    renderTheLayout = ({ childrenDataArray, gridHeight, imgSrcArray }) => {
        const { columnWidth, itemHeight, duration, lightbox, easing } = this.props;
        const { id } = this.state;
        let photoIdex = 0;

        return (
            <div className="filter-gallery" style={{ height: gridHeight }}>
                <TransitionGroup
                    component={null}
                >
                    {

                        childrenDataArray.map((childData, index) => {
                            if (childData === undefined) return;

                            photoIdex++;
                            const innerPhotoIndex = photoIdex;
                            return (
                                <Transition key={index + id} in={true} timeout={{
                                    enter: duration,
                                    exit: 0,
                                }}>
                                    {state => (
                                        <div
                                            className="item"
                                            style={{
                                                transition: `all ${duration}ms ${easing}`,
                                                position: 'absolute',
                                                width: `${columnWidth}px`,
                                                height: `${itemHeight}px`,
                                                top: childData.y ? childData.y : undefined,
                                                left: childData.x ? childData.x : undefined,
                                            }}
                                            onClick={lightbox ? this.openLightboxHandler(imgSrcArray, innerPhotoIndex) : undefined}
                                        >
                                            {childData.children}
                                        </div>
                                    )}
                                </Transition>
                            );
                        })
                    }
                </TransitionGroup>
            </div>
        )
    }

    changeCategory = e => {
        this.setState({ filterBy: e.target.dataset.filter });
    }

    validateChildrenNodes = childrenNodesArray => {
        const { lightbox } = this.props;
        let valid = true;

        childrenNodesArray.forEach(children => {
            if (!children.props["data-filter"]) {
                throw new Error('Expected children to have data-filter attribute');
                valid = false;
            }

            if (!children.props.src && lightbox) {
                throw new Error('Expected children to have src attribute');
                valid = false;
            }
        })

        return valid;
    }

    openLightboxHandler = (imgSrcArray, index) => () => {
        this.setState({ isOpen: true, photoIndex: index - 1, imgSrcArray });
    }

    onResize = width => {
        this.setState({ width });
    }

    lightboxCloseHandler = () => {
        this.setState({ isOpen: false })
    }

    onMovePrevRequest = () => {
        const { imgSrcArray, photoIndex } = this.state;

        this.setState({
            photoIndex: (photoIndex + imgSrcArray.length - 1) % imgSrcArray.length
        })
    }

    onMoveNextRequest = () => {
        const { imgSrcArray, photoIndex } = this.state;

        this.setState({
            photoIndex: (photoIndex + 1) % imgSrcArray.length
        })
    }


    render() {
        const { categories, lightbox } = this.props;
        const { isOpen, imgSrcArray, photoIndex } = this.state;
        return (
            <ReactResizeDetector handleWidth onResize={this.onResize}>
                <div className="filter filter-basic">
                    <Controlers categories={categories} changeCategory={this.changeCategory} />
                    {this.calculateLayout()}
                    {(lightbox && isOpen) && (
                        <Lightbox
                            mainSrc={imgSrcArray[photoIndex]}
                            nextSrc={imgSrcArray[(photoIndex + 1) % imgSrcArray.length]}
                            prevSrc={imgSrcArray[(photoIndex + imgSrcArray.length - 1) % imgSrcArray.length]}
                            onCloseRequest={this.lightboxCloseHandler}
                            onMovePrevRequest={this.onMovePrevRequest}
                            onMoveNextRequest={this.onMoveNextRequest}
                        />
                    )}
                </div>
            </ReactResizeDetector>
        );
    }
}

filterContainer.defaultProps = {
    categories: [],
    gutterWidth: 0,
    gutterHeight: 0,
    layout: 'simple',
    component: 'div',
    itemHeight: 150,
    columnWidth: 200,
    columns: 5,
    duration: 300,
    responsive: true,
    lightbox: false,
    easing: "ease-out"
}

filterContainer.propTypes = {
    categories: PropTypes.arrayOf(PropTypes.string),
    columns: PropTypes.number.isRequired,
    columnWidth: PropTypes.number.isRequired,
    itemHeight: PropTypes.number,
    gutterWidth: PropTypes.number,
    gutterHeight: PropTypes.number,
    duration: PropTypes.number.isRequired,
    easing: PropTypes.string,
    component: PropTypes.string,
    responsive: PropTypes.bool.isRequired,
    lightbox: PropTypes.bool.isRequired
}

export default filterContainer;