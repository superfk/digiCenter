import React, { Component } from 'react';
import Toolbar from '../components/Toolbar';
import Textarea from '../components/Textarea';
import PropTypes from "prop-types"
import '../styles/index.css'

class wysiwygContainer extends Component {
    state = {
        activeCommands: {
            bold: false,
            italic: false,
            strikeThrough: false,
            underline: false,
            justifyLeft: false,
            justifyCenter: false,
            justifyRight: false,
            justifyFull: false,
            bulletlist: false,
            numberedlist: false,
            showHTML: false,
            insertUnorderedList: false,
            insertOrderedList: false,
            textStyle: "p"
        },
        view: true
    }


    getState = () => {
        const bold = document.queryCommandState('bold');
        const italic = document.queryCommandState('italic');
        const strikeThrough = document.queryCommandState('strikeThrough');
        const underline = document.queryCommandState('underline');
        const justifyLeft = document.queryCommandState('justifyLeft');
        const justifyCenter = document.queryCommandState('justifyCenter');
        const justifyRight = document.queryCommandState('justifyRight');
        const justifyFull = document.queryCommandState('justifyFull');
        const insertUnorderedList = document.queryCommandState('insertUnorderedList');
        const insertOrderedList = document.queryCommandState('insertOrderedList');
        let textStyle = document.queryCommandValue('formatBlock');

        const textStyleOptions = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre'];

        if (!textStyleOptions.includes(textStyle)) {
            textStyle = textStyle === '' || 'div' ? 'p' : this.state.activeCommands.textStyle;
        }

        this.setState({
            activeCommands: {
                ...this.state.activeCommands,
                bold,
                italic,
                strikeThrough,
                underline,
                justifyLeft,
                justifyCenter,
                justifyRight,
                justifyFull,
                insertUnorderedList,
                insertOrderedList,
                textStyle

            }
        });
    }

    modifyHandler = (commandTilte, passedArg) => () => {
        const { enterurl, imageurl } = this.props.translations
        let parameters;
        let activeCommands;
        let link;

        switch (commandTilte) {
            case 'bold':
            case 'italic':
            case 'underline':
            case 'strikeThrough':
            case 'insertUnorderedList':
            case 'insertOrderedList':
                activeCommands = { [commandTilte]: !this.state.activeCommands[commandTilte] }
                break;
            case 'justifyLeft':
                activeCommands = {
                    justifyLeft: true,
                    justifyRight: false,
                    justifyCenter: false,
                    justifyFull: false
                }
                break;
            case 'justifyRight':
                activeCommands = {
                    justifyLeft: false,
                    justifyRight: true,
                    justifyCenter: false,
                    justifyFull: false
                }
                break;
            case 'justifyCenter':
                activeCommands = {
                    justifyLeft: false,
                    justifyRight: false,
                    justifyCenter: true,
                    justifyFull: false
                }
                break;

            case 'justifyFull':
                activeCommands = {
                    justifyLeft: false,
                    justifyRight: false,
                    justifyCenter: false,
                    justifyFull: true
                }
                break;
            case 'createLink':
                link = prompt(enterurl, 'https://')
                if (link.trim() !== '') {
                    parameters = link;
                }
                break;
            case 'insertImage':
                link = prompt(imageurl, 'https://')
                if (link.trim() !== '') {
                    parameters = link;
                }
                break;
            case 'formatBlock':
                parameters = `<${passedArg}>`
                activeCommands = {
                    textStyle: passedArg
                }
                break;
            case 'foreColor':
                parameters = passedArg;
                break;
            case 'changeView':
                this.changeViewHandler()

                return;
            default:
                break;
        }

        document.execCommand(commandTilte, false, parameters);
        this.setState({
            activeCommands: {
                ...this.state.activeCommands,
                ...activeCommands
            }
        });
    }

    changeViewHandler = () => {
        this.setState({ view: !this.state.view })
    }

    render() {
        const { activeCommands, view, } = this.state;
        const { translations, colors, initialContent, tooltips } = this.props;

        return (
            <div className="mdb-wysiwyg-container">
                <Toolbar tooltips={tooltips} colors={colors} view={view} activeCommands={activeCommands} translations={translations} modify={this.modifyHandler} />
                <Textarea initialContent={initialContent} view={view} getState={this.getState} />
            </div>
        );
    }
};

wysiwygContainer.defaultProps = {
    translations: {
        paragraph: 'Paragraph',
        heading: 'Heading',
        preformatted: 'Preformatted',
        bold: 'Bold',
        italic: 'Italic',
        strikeThrough: 'Strike Through',
        underline: 'Underline',
        textcolor: 'Color',
        justifyLeft: 'Align Left',
        justifyCenter: 'Align Center',
        justifyRight: 'Align Right',
        justifyFull: 'Align Justify',
        insertlink: 'Insert Link',
        insertpicture: 'Insert Picture',
        insertUnorderedList: 'Ordered List',
        insertOrderedList: 'Numbered List',
        enterurl: 'Enter a URL',
        imageurl: 'Image URL',
        linkdescription: 'Enter a description for this link',
        linkname: 'Link name',
        showHTML: 'Change view'
    },
    colors: [
        '#EA3C3B', '#E00065', '#9C00B0', '#7000B7', '#533CB4', '#5587F4', '#509EF4', '#46B9D3', '#2E9786', '#4FB54E', '#87CA47', '#C4E534', '#DFDFDF', '#F5C700', '#F49B00', '#F45429', '#75564A', '#9D9C9D', '#657B8A', '#4B506E', '#FFFFFF', '#000000', '#F9E500', '#FF69B4'
    ],
    tooltips: true
}

wysiwygContainer.propTypes = {
    colors: PropTypes.arrayOf(PropTypes.string).isRequired,
    tooltips: PropTypes.bool.isRequired,
    translations: PropTypes.objectOf(PropTypes.string).isRequired,
    initialContent: PropTypes.string
}

export default wysiwygContainer;