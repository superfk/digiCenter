import React from 'react'
import MDBTooltip from './tooltip';
import HtmlElementPicker from './HtmlElementPicker';
import ColorPicker from './colorPicker';
import PropTypes from "prop-types";

const toolbar = props => {

    const { view, tooltips, translations, modify, activeCommands, colors } = props;
    const { paragraph, heading, preformatted } = translations;

    const btnGroup1 = [
        { title: "Bold", icon: "bold", command: 'bold' },
        { title: "Italic", icon: "italic", command: 'italic' },
        { title: "Strike through", icon: "strikethrough", command: 'strikeThrough' },
        { title: 'Underline', icon: 'underline', command: 'underline' }
    ];
    const btnGroup2 = [
        { title: "Align Left", icon: "align-left", command: 'justifyLeft' },
        { title: "Align Center", icon: "align-center", command: 'justifyCenter' },
        { title: "Align Right", icon: "align-right", command: 'justifyRight' },
        { title: "Align Justify", icon: "align-justify", command: 'justifyFull' }
    ];
    const btnGroup3 = [
        { title: "Insert Link", icon: "paperclip", command: 'createLink' },
        { title: "Insert Picture", icon: "image", command: 'insertImage' }
    ];
    const btnGroup4 = [
        { title: "Bullet List", icon: "list-ul", command: 'insertUnorderedList' },
        { title: "Numbered List", icon: "list-ol", command: 'insertOrderedList' }
    ];
    const btnGroup5 = [{ title: "Change view", icon: "code", command: 'changeView' }];

    const withTooltip = (item, Component) => {

        let disabled
        if (!view) {
            disabled = item.command === 'changeView' ? false : true;
        }

        if (tooltips) {
            if (!Component) {
                return (
                    <MDBTooltip
                        key={item.title}
                        placement="top"
                        tooltipContent={translations[item.command] || item.title}>
                        <li>
                            <button disabled={disabled} active={activeCommands[item.command] ? activeCommands[item.command].toString() : undefined} onClick={modify(item.command)}>
                                <i className={`fas fa-${item.icon}`} />
                            </button>
                        </li>
                    </MDBTooltip >
                )
            } else {
                return (
                    <MDBTooltip
                        key={item.title}
                        placement="top"
                        tooltipContent={translations[item.command] || item.title}>
                        {Component}
                    </MDBTooltip>
                )
            }
        }


        if (!Component) {
            return (
                <li key={item.title}>
                    <button disabled={disabled} active={activeCommands[item.command] ? activeCommands[item.command].toString() : undefined} onClick={modify(item.command)}>
                        <i className={`fas fa-${item.icon}`} />
                    </button>
                </li>
            )
        }

        return Component
    }

    return (
        <div className="mdb-wysiwyg-toolbar">
            <HtmlElementPicker textStyle={activeCommands.textStyle} disabled={!view} translations={{ paragraph, heading, preformatted }} modify={modify} />
            <div className="mdb-wysiwyg-toolbar-group">
                <ul className="mdb-wysiwyg-toolbar-options">
                    {
                        btnGroup1.map(item => {
                            return (
                                withTooltip(item)
                            )
                        })
                    }
                    {withTooltip({ title: translations.textcolor }, (<ColorPicker colors={colors} disabled={!view} modify={modify} />))}
                </ul>
            </div >
            <div className="mdb-wysiwyg-toolbar-group">
                <ul className="mdb-wysiwyg-toolbar-options">
                    {
                        btnGroup2.map(item => {
                            return (
                                withTooltip(item)
                            )
                        })
                    }
                </ul>
            </div >
            <div className="mdb-wysiwyg-toolbar-group">
                <ul className="mdb-wysiwyg-toolbar-options">
                    {
                        btnGroup3.map(item => {
                            return (
                                withTooltip(item)
                            )
                        })
                    }
                </ul>
            </div >
            <div className="mdb-wysiwyg-toolbar-group">
                <ul className="mdb-wysiwyg-toolbar-options">
                    {
                        btnGroup4.map(item => {
                            return (
                                withTooltip(item)
                            )
                        })
                    }
                </ul>
            </div >
            <div className="mdb-wysiwyg-toolbar-group">
                <ul className="mdb-wysiwyg-toolbar-options">
                    {
                        btnGroup5.map(item => {
                            return (
                                withTooltip(item)
                            )
                        })
                    }
                </ul>
            </div >
        </div>
    )
}

toolbar.propTypes = {
    view: PropTypes.bool.isRequired,
    tooltips: PropTypes.bool.isRequired,
    translations: PropTypes.objectOf(PropTypes.string).isRequired,
    modify: PropTypes.func.isRequired,
    activeCommands: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.string])).isRequired,
    colors: PropTypes.arrayOf(PropTypes.string).isRequired,
}

export default toolbar;